#include "./matscs_formulas.h"

template<typename Scalar>
void calculate_tcoeff_matrix(
        int n,
        Scalar h,
        const std::array<Eigen::Matrix<Scalar, -1, -1>, MATSCS_N> &vs,
        Eigen::Array<Eigen::Matrix<Scalar, -1, -1>, MATSCS_ETA_delta, MATSCS_HMAX_delta> &tDelta,
        std::array<Eigen::Matrix<Scalar, -1, -1>, MATSCS_ETA_h> &tH) {
        typedef Eigen::Matrix<Scalar, -1, -1> MatrixXs;
    const MatrixXs &v0 = vs[0];
    const MatrixXs &v1 = vs[1];
    const MatrixXs &v2 = vs[2];
    const MatrixXs &v3 = vs[3];
    const MatrixXs &v4 = vs[4];
    const MatrixXs &v5 = vs[5];
    const MatrixXs &v6 = vs[6];
    const MatrixXs &v7 = vs[7];
    const MatrixXs &v8 = vs[8];
    const Scalar &h1 = h;
    const Scalar h2 = h*h1;
    const Scalar h3 = h*h2;
    const Scalar h4 = h*h3;
    const Scalar h5 = h*h4;
    const Scalar h6 = h*h5;
    const Scalar h7 = h*h6;
    const Scalar h8 = h*h7;
    const Scalar h9 = h*h8;
    const Scalar h10 = h*h9;
    const MatrixXs v0_v0 = v0 * v0;
    const MatrixXs v0_v1 = v0 * v1;
    const MatrixXs v0_v2 = v0 * v2;
    const MatrixXs v1_v1 = v1 * v1;
    const MatrixXs v1_v2 = v1 * v2;
    const MatrixXs v0_v3 = v0 * v3;
    const MatrixXs v2_v1 = v2 * v1;
    const MatrixXs v2_v2 = v2 * v2;
    const MatrixXs v3_v1 = v3 * v1;
    const MatrixXs v1_v3 = v1 * v3;
    const MatrixXs v0_v4 = v0 * v4;
    const MatrixXs v3_v2 = v3 * v2;
    const MatrixXs v2_v3 = v2 * v3;
    const MatrixXs v4_v1 = v4 * v1;
    const MatrixXs v1_v4 = v1 * v4;
    const MatrixXs v0_v5 = v0 * v5;
    const MatrixXs v1_v0_v0 = v1 * v0_v0;
    const MatrixXs v5_v0 = v5 * v0;
    const MatrixXs v4_v0 = v4 * v0;
    const MatrixXs v2_v0_v0 = v2 * v0_v0;
    const MatrixXs v1_v0_v1 = v1 * v0_v1;
    const MatrixXs v0_v0_v2 = v0_v0 * v2;
    const MatrixXs v0_v1_v1 = v0_v1 * v1;
    const MatrixXs v0_v1_v2 = v0_v1 * v2;
    const MatrixXs v0_v2_v1 = v0_v2 * v1;
    const MatrixXs v3_v0 = v3 * v0;
    const MatrixXs v2_v1_v0 = v2_v1 * v0;
    const MatrixXs v0_v0_v1 = v0_v0 * v1;
    const MatrixXs v1_v2_v0 = v1_v2 * v0;
    const MatrixXs v1_v0_v2 = v1 * v0_v2;
    const MatrixXs v2_v0_v1 = v2 * v0_v1;
    const MatrixXs v3_v0_v0 = v3 * v0_v0;
    const MatrixXs v3_v3 = v3 * v3;
    const MatrixXs v0_v0_v3 = v0_v0 * v3;
    const MatrixXs v0_v3_v0 = v0_v3 * v0;
    const MatrixXs v0_v2_v0 = v0_v2 * v0;
    const MatrixXs v1_v1_v0 = v1_v1 * v0;
    const MatrixXs v1_v5 = v1 * v5;
    const MatrixXs v5_v1 = v5 * v1;
    const MatrixXs v1_v1_v1 = v1_v1 * v1;
    const MatrixXs v4_v2 = v4 * v2;
    const MatrixXs v2_v4 = v2 * v4;
    const MatrixXs v6_v0 = v6 * v0;
    const MatrixXs v0_v6 = v0 * v6;
    const MatrixXs v2_v0 = v2 * v0;
    const MatrixXs v1_v1_v2 = v1_v1 * v2;
    const MatrixXs v3_v0_v1 = v3 * v0_v1;
    const MatrixXs v0_v2_v2 = v0_v2 * v2;
    const MatrixXs v3_v1_v0 = v3_v1 * v0;
    const MatrixXs v2_v1_v1 = v2 * v1_v1;
    const MatrixXs v1_v2_v1 = v1_v2 * v1;
    const MatrixXs v1_v3_v0 = v1_v3 * v0;
    const MatrixXs v0_v3_v1 = v0_v3 * v1;
    const MatrixXs v1_v0_v3 = v1 * v0_v3;
    const MatrixXs v0_v1_v3 = v0_v1 * v3;
    const MatrixXs v2_v2_v0 = v2_v2 * v0;
    const MatrixXs v2_v0_v2 = v2 * v0_v2;
    const MatrixXs v0_v4_v0 = v0_v4 * v0;
    const MatrixXs v4_v0_v0 = v4 * v0_v0;
    const MatrixXs v0_v0_v4 = v0_v0 * v4;
    const MatrixXs v0_v1_v0 = v0_v1 * v0;
    const MatrixXs v1_v0 = v1 * v0;
    const MatrixXs v0_v1_v0_v0 = v0_v1 * v0_v0;
    const MatrixXs v0_v0_v1_v0 = v0_v0_v1 * v0;
    const MatrixXs v1_v0_v0_v0 = v1_v0_v0 * v0;
    const MatrixXs v0_v0_v0_v1 = v0_v0 * v0_v1;
    const MatrixXs v2_v0_v0_v0 = v2_v0_v0 * v0;
    const MatrixXs v0_v0_v0_v2 = v0_v0 * v0_v2;
    const MatrixXs v0_v0_v2_v0 = v0_v0_v2 * v0;
    const MatrixXs v0_v2_v0_v0 = v0_v2 * v0_v0;
    const MatrixXs v1_v0_v0_v1 = v1_v0_v0 * v1;
    const MatrixXs v1_v0_v1_v0 = v1_v0_v1 * v0;
    const MatrixXs v0_v0_v1_v1 = v0_v0 * v1_v1;
    const MatrixXs v1_v1_v0_v0 = v1_v1 * v0_v0;
    const MatrixXs v0_v1_v0_v1 = v0_v1 * v0_v1;
    const MatrixXs v0_v1_v1_v0 = v0_v1_v1 * v0;
    const MatrixXs v3_v2_v0 = v3_v2 * v0;
    const MatrixXs v2_v3_v0 = v2_v3 * v0;
    const MatrixXs v0_v2_v3 = v0_v2 * v3;
    const MatrixXs v0_v3_v2 = v0_v3 * v2;
    const MatrixXs v7_v0 = v7 * v0;
    const MatrixXs v0_v7 = v0 * v7;
    const MatrixXs v4_v3 = v4 * v3;
    const MatrixXs v3_v4 = v3 * v4;
    const MatrixXs v0_v1_v2_v0 = v0_v1_v2 * v0;
    const MatrixXs v0_v5_v0 = v0_v5 * v0;
    const MatrixXs v4_v1_v0 = v4_v1 * v0;
    const MatrixXs v2_v1_v0_v0 = v2_v1 * v0_v0;
    const MatrixXs v1_v2_v2 = v1_v2 * v2;
    const MatrixXs v2_v0_v3 = v2 * v0_v3;
    const MatrixXs v1_v0_v4 = v1 * v0_v4;
    const MatrixXs v4_v0_v1 = v4 * v0_v1;
    const MatrixXs v0_v0_v5 = v0_v0 * v5;
    const MatrixXs v0_v1_v4 = v0_v1 * v4;
    const MatrixXs v5_v0_v0 = v5 * v0_v0;
    const MatrixXs v3_v0_v0_v0 = v3_v0_v0 * v0;
    const MatrixXs v1_v1_v0_v1 = v1_v1 * v0_v1;
    const MatrixXs v1_v0_v0_v2 = v1_v0_v0 * v2;
    const MatrixXs v3_v0_v2 = v3 * v0_v2;
    const MatrixXs v2_v2_v1 = v2 * v2_v1;
    const MatrixXs v2_v0_v1_v0 = v2_v0_v1 * v0;
    const MatrixXs v2_v0_v0_v1 = v2_v0_v0 * v1;
    const MatrixXs v0_v1_v1_v1 = v0_v1 * v1_v1;
    const MatrixXs v1_v2_v0_v0 = v1_v2 * v0_v0;
    const MatrixXs v0_v2_v0_v1 = v0_v2 * v0_v1;
    const MatrixXs v0_v0_v3_v0 = v0_v0 * v3_v0;
    const MatrixXs v6_v1 = v6 * v1;
    const MatrixXs v0_v3_v0_v0 = v0_v3 * v0_v0;
    const MatrixXs v0_v2_v1_v0 = v0_v2_v1 * v0;
    const MatrixXs v1_v1_v3 = v1_v1 * v3;
    const MatrixXs v1_v0_v1_v1 = v1_v0_v1 * v1;
    const MatrixXs v1_v1_v1_v0 = v1_v1_v1 * v0;
    const MatrixXs v0_v1_v0_v2 = v0_v1 * v0_v2;
    const MatrixXs v1_v0_v2_v0 = v1_v0_v2 * v0;
    const MatrixXs v0_v0_v2_v1 = v0_v0 * v2_v1;
    const MatrixXs v0_v0_v1_v2 = v0_v0 * v1_v2;
    const MatrixXs v0_v0_v0_v3 = v0_v0 * v0_v3;
    const MatrixXs v3_v1_v1 = v3 * v1_v1;
    const MatrixXs v1_v6 = v1 * v6;
    const MatrixXs v0_v1_v0_v0_v0 = v0_v1_v0_v0 * v0;
    const MatrixXs v1_v0_v0_v0_v0 = v1_v0_v0 * v0_v0;
    const MatrixXs v0_v4_v1 = v0_v4 * v1;
    const MatrixXs v0_v0_v0_v1_v0 = v0_v0 * v0_v1_v0;
    const MatrixXs v2_v5 = v2 * v5;
    const MatrixXs v0_v0_v1_v0_v0 = v0_v0 * v1_v0_v0;
    const MatrixXs v5_v2 = v5 * v2;
    const MatrixXs v0_v0_v0_v0_v1 = v0_v0 * v0_v0_v1;
    const MatrixXs v1_v4_v0 = v1_v4 * v0;
    tDelta(0, 0).resize(2*n, 2*n);
    tDelta(0, 0).block(0, 0, n, n) = MatrixXs::Identity(n, n);
    tDelta(0, 0).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 0).block(n, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 0).block(n, n, n, n) = MatrixXs::Identity(n, n);
    tDelta(0, 1).resize(2*n, 2*n);
    tDelta(0, 1).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 1).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 1).block(n, 0, n, n) = h1 * (-0.5*v1) + h2 * (0.5*v2) + h3 * (-0.5*v3) + h4 * (0.5*v4) + h5 * (-0.5*v5) + h6 * (0.5*v6) + h7 * (-0.5*v7);
    tDelta(0, 1).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 2).resize(2*n, 2*n);
    tDelta(0, 2).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 2).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 2).block(n, 0, n, n) = (0.5*v1) + h1 * (-1.5*v2) + h2 * (3.0*v3) + h3 * (-5.0*v4) + h4 * (7.5*v5) + h5 * (-10.5*v6) + h6 * (14.0*v7);
    tDelta(0, 2).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 3).resize(2*n, 2*n);
    tDelta(0, 3).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 3).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 3).block(n, 0, n, n) = (1.0*v2) + h1 * (-5.0*v3) + h2 * (15.0*v4) + h3 * (-35.0*v5) + h4 * (70.0*v6) + h5 * (-126.0*v7);
    tDelta(0, 3).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 4).resize(2*n, 2*n);
    tDelta(0, 4).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 4).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 4).block(n, 0, n, n) = (2.5*v3) + h1 * (-17.5*v4) + h2 * (70.0*v5) + h3 * (-210.0*v6) + h4 * (525.0*v7);
    tDelta(0, 4).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 5).resize(2*n, 2*n);
    tDelta(0, 5).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 5).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 5).block(n, 0, n, n) = (7.0*v4) + h1 * (-63.0*v5) + h2 * (315.0*v6) + h3 * (-1155.0*v7);
    tDelta(0, 5).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 6).resize(2*n, 2*n);
    tDelta(0, 6).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 6).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 6).block(n, 0, n, n) = (21.0*v5) + h1 * (-231.0*v6) + h2 * (1386.0*v7);
    tDelta(0, 6).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 7).resize(2*n, 2*n);
    tDelta(0, 7).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 7).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 7).block(n, 0, n, n) = (66.0*v6) + h1 * (-858.0*v7);
    tDelta(0, 7).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 8).resize(2*n, 2*n);
    tDelta(0, 8).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 8).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 8).block(n, 0, n, n) = 214.5*v7;
    tDelta(0, 8).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(0, 9) = MatrixXs::Zero(2*n, 2*n);
    tH[0].resize(2*n, 2*n);
    tH[0].block(0, 0, n, n) = MatrixXs::Identity(n, n);
    tH[0].block(0, n, n, n) = MatrixXs::Zero(n,n);
    tH[0].block(n, 0, n, n) = MatrixXs::Zero(n,n);
    tH[0].block(n, n, n, n) = MatrixXs::Identity(n, n);
    tDelta(1, 0) = MatrixXs::Zero(2*n, 2*n);
    tDelta(1, 1).resize(2*n, 2*n);
    tDelta(1, 1).block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 1).block(0, n, n, n) = MatrixXs::Identity(n, n);
    tDelta(1, 1).block(n, 0, n, n) = h1 * (-0.5*v1) + h2 * (0.5*v2) + h3 * (-0.5*v3) + h4 * (0.5*v4) + h5 * (-0.5*v5) + h6 * (0.5*v6) + h7 * (-0.5*v7);
    tDelta(1, 1).block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 2).resize(2*n, 2*n);
    tDelta(1, 2).block(0, 0, n, n) = h1 * (-0.5*v1) + h2 * (0.5*v2) + h3 * (-0.5*v3) + h4 * (0.5*v4) + h5 * (-0.5*v5) + h6 * (0.5*v6) + h7 * (-0.5*v7);
    tDelta(1, 2).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 2).block(n, 0, n, n) = (0.5*v1) + h1 * (-1.5*v2) + h2 * (3.0*v3) + h3 * (-5.0*v4) + h4 * (7.5*v5) + h5 * (-10.5*v6) + h6 * (14.0*v7);
    tDelta(1, 2).block(n, n, n, n) = h1 * (-0.5*v1) + h2 * (0.5*v2) + h3 * (-0.5*v3) + h4 * (0.5*v4) + h5 * (-0.5*v5) + h6 * (0.5*v6) + h7 * (-0.5*v7);
    tDelta(1, 3).resize(2*n, 2*n);
    tDelta(1, 3).block(0, 0, n, n) = (0.5*v1) + h1 * (-1.5*v2) + h2 * (3.0*v3) + h3 * (-5.0*v4) + h4 * (7.5*v5) + h5 * (-10.5*v6) + h6 * (14.0*v7);
    tDelta(1, 3).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 3).block(n, 0, n, n) = (1.5*v2) + h1 * (-0.125*v0_v1+-7.5*v3+0.125*v1_v0) + h2 * (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+22.5*v4) + h3 * (0.125*v3_v0+-0.125*v1_v2+-0.125*v0_v3+-52.5*v5+-0.125*v2_v1) + h4 * (0.125*v2_v2+0.125*v1_v3+105.0*v6+-0.125*v4_v0+0.125*v3_v1+0.125*v0_v4) + h5 * (-0.125*v2_v3+-0.125*v1_v4+-0.125*v4_v1+-0.125*v0_v5+0.125*v5_v0+-0.125*v3_v2+-189.0*v7) + h6 * (0.125*v2_v4+0.125*v5_v1+0.125*v3_v3+0.125*v4_v2+0.125*v1_v5+-0.125*v6_v0+0.125*v0_v6);
    tDelta(1, 3).block(n, n, n, n) = (0.5*v1) + h1 * (-1.5*v2) + h2 * (3.0*v3) + h3 * (-5.0*v4) + h4 * (7.5*v5) + h5 * (-10.5*v6) + h6 * (14.0*v7);
    tDelta(1, 4).resize(2*n, 2*n);
    tDelta(1, 4).block(0, 0, n, n) = (1.0*v2) + h1 * (-5.0*v3) + h2 * (15.0*v4) + h3 * (-35.0*v5) + h4 * (70.0*v6) + h5 * (-126.0*v7);
    tDelta(1, 4).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 4).block(n, 0, n, n) = (0.0833333333333*v0_v1+5.0*v3+-0.0833333333333*v1_v0) + h1 * (-0.25*v0_v2+-0.25*v1_v1+0.25*v2_v0+-35.0*v4) + h2 * (-0.5*v3_v0+0.416666666667*v1_v2+0.5*v0_v3+140.0*v5+0.583333333333*v2_v1) + h3 * (-0.75*v2_v2+-0.666666666667*v1_v3+-420.0*v6+0.833333333333*v4_v0+-1.08333333333*v3_v1+-0.833333333333*v0_v4) + h4 * (1.0*v2_v3+1.0*v1_v4+1.75*v4_v1+1.25*v0_v5+-1.25*v5_v0+1.25*v3_v2+1050.0*v7) + h5 * (-1.33333333333*v2_v4+-2.58333333333*v5_v1+-1.5*v3_v3+-1.91666666667*v4_v2+-1.41666666667*v1_v5+1.75*v6_v0+-1.75*v0_v6);
    tDelta(1, 4).block(n, n, n, n) = (1.0*v2) + h1 * (-5.0*v3) + h2 * (15.0*v4) + h3 * (-35.0*v5) + h4 * (70.0*v6) + h5 * (-126.0*v7);
    tDelta(1, 5).resize(2*n, 2*n);
    tDelta(1, 5).block(0, 0, n, n) = (2.5*v3) + h1 * (-17.5*v4) + h2 * (70.0*v5) + h3 * (-210.0*v6) + h4 * (525.0*v7);
    tDelta(1, 5).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 5).block(n, 0, n, n) = (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+17.5*v4) + h1 * (0.625*v3_v0+-0.5*v1_v2+-0.625*v0_v3+-157.5*v5+-0.75*v2_v1) + h2 * (1.625*v2_v2+1.375*v1_v3+787.5*v6+-1.875*v4_v0+2.625*v3_v1+1.875*v0_v4) + h3 * (-3.25*v2_v3+-3.125*v1_v4+-6.875*v4_v1+-4.375*v0_v5+4.375*v5_v0+-4.25*v3_v2+-2887.5*v7) + h4 * (6.0*v2_v4+15.0*v5_v1+7.0*v3_v3+9.5*v4_v2+6.25*v1_v5+-8.75*v6_v0+8.75*v0_v6);
    tDelta(1, 5).block(n, n, n, n) = (2.5*v3) + h1 * (-17.5*v4) + h2 * (70.0*v5) + h3 * (-210.0*v6) + h4 * (525.0*v7);
    tDelta(1, 6).resize(2*n, 2*n);
    tDelta(1, 6).block(0, 0, n, n) = (7.0*v4) + h1 * (-63.0*v5) + h2 * (315.0*v6) + h3 * (-1155.0*v7);
    tDelta(1, 6).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 6).block(n, 0, n, n) = (-0.25*v3_v0+0.2*v1_v2+0.25*v0_v3+63.0*v5+0.3*v2_v1) + h1 * (-1.5*v2_v2+-1.25*v1_v3+-693.0*v6+1.75*v4_v0+-2.5*v3_v1+-1.75*v0_v4) + h2 * (5.05*v2_v3+4.75*v1_v4+11.5*v4_v1+7.0*v0_v5+-7.0*v5_v0+6.7*v3_v2+4158.0*v7) + h3 * (-13.75*v2_v4+-38.5*v5_v1+-16.25*v3_v3+-22.5*v4_v2+-14.0*v1_v5+21.0*v6_v0+-21.0*v0_v6);
    tDelta(1, 6).block(n, n, n, n) = (7.0*v4) + h1 * (-63.0*v5) + h2 * (315.0*v6) + h3 * (-1155.0*v7);
    tDelta(1, 7).resize(2*n, 2*n);
    tDelta(1, 7).block(0, 0, n, n) = (21.0*v5) + h1 * (-231.0*v6) + h2 * (1386.0*v7);
    tDelta(1, 7).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 7).block(n, 0, n, n) = (0.5*v2_v2+0.416666666667*v1_v3+231.0*v6+-0.583333333333*v4_v0+0.833333333333*v3_v1+0.583333333333*v0_v4) + h1 * (-3.75*v2_v3+-3.5*v1_v4+-8.75*v4_v1+-5.25*v0_v5+5.25*v5_v0+-5.0*v3_v2+-3003.0*v7) + h2 * (16.8333333333*v2_v4+49.5833333333*v5_v1+20.0*v3_v3+27.9166666667*v4_v2+16.9166666667*v1_v5+-26.25*v6_v0+26.25*v0_v6);
    tDelta(1, 7).block(n, n, n, n) = (21.0*v5) + h1 * (-231.0*v6) + h2 * (1386.0*v7);
    tDelta(1, 8).resize(2*n, 2*n);
    tDelta(1, 8).block(0, 0, n, n) = (66.0*v6) + h1 * (-858.0*v7);
    tDelta(1, 8).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 8).block(n, 0, n, n) = (1.07142857143*v2_v3+1.0*v1_v4+2.5*v4_v1+1.5*v0_v5+-1.5*v5_v0+1.42857142857*v3_v2+858.0*v7) + h1 * (-10.5*v2_v4+-31.5*v5_v1+-12.5*v3_v3+-17.5*v4_v2+-10.5*v1_v5+16.5*v6_v0+-16.5*v0_v6);
    tDelta(1, 8).block(n, n, n, n) = (66.0*v6) + h1 * (-858.0*v7);
    tDelta(1, 9).resize(2*n, 2*n);
    tDelta(1, 9).block(0, 0, n, n) = 214.5*v7;
    tDelta(1, 9).block(0, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(1, 9).block(n, 0, n, n) = 2.625*v2_v4+7.875*v5_v1+3.125*v3_v3+4.375*v4_v2+2.625*v1_v5+-4.125*v6_v0+4.125*v0_v6;
    tDelta(1, 9).block(n, n, n, n) = 214.5*v7;
    tH[1].resize(2*n, 2*n);
    tH[1].block(0, 0, n, n) = MatrixXs::Zero(n,n);
    tH[1].block(0, n, n, n) = h1 * (MatrixXs::Identity(n, n));
    tH[1].block(n, 0, n, n) = h3 * (0.5*v2);
    tH[1].block(n, 0, n, n) += h4 * (-0.0416666666667*v0_v1+0.0416666666667*v1_v0);
    tH[1].block(n, 0, n, n) += h5 * (0.5*v4);
    tH[1].block(n, 0, n, n) += h6 * (-0.00833333333333*v1_v2+0.00833333333333*v2_v1);
    tH[1].block(n, 0, n, n) += h7 * (0.5*v6);
    tH[1].block(n, 0, n, n) += h8 * (-0.00357142857143*v2_v3+0.00357142857143*v3_v2);
    tH[1].block(n, 0, n, n) += h9 * (0.5*v8);
    tH[1].block(n, 0, n, n) += h10 * (-0.00198412698413*v3_v4+0.00198412698413*v4_v3);
    tH[1].block(n, n, n, n) = MatrixXs::Zero(n,n);
    tDelta(2, 0) = MatrixXs::Zero(2*n, 2*n);
    tDelta(2, 1) = MatrixXs::Zero(2*n, 2*n);
    tDelta(2, 2) = MatrixXs::Zero(2*n, 2*n);
    tDelta(2, 3).resize(2*n, 2*n);
    tDelta(2, 3).block(0, 0, n, n) = (-0.5*v1) + h1 * (1.5*v2) + h2 * (-3.0*v3) + h3 * (5.0*v4) + h4 * (-7.5*v5) + h5 * (10.5*v6) + h6 * (-14.0*v7);
    tDelta(2, 3).block(0, n, n, n) = h1 * (-0.5*v1) + h2 * (0.5*v2) + h3 * (-0.5*v3) + h4 * (0.5*v4) + h5 * (-0.5*v5) + h6 * (0.5*v6);
    tDelta(2, 3).block(n, 0, n, n) = (-1.5*v2) + h1 * (7.5*v3+-0.125*v0_v1+0.125*v1_v0) + h2 * (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+-22.5*v4) + h3 * (0.125*v3_v0+-0.125*v1_v2+-0.125*v0_v3+52.5*v5+-0.125*v2_v1) + h4 * (0.125*v2_v2+0.125*v1_v3+-105.0*v6+-0.125*v4_v0+0.125*v3_v1+0.125*v0_v4) + h5 * (-0.125*v2_v3+-0.125*v1_v4+-0.125*v4_v1+-0.125*v0_v5+0.125*v5_v0+-0.125*v3_v2+189.0*v7) + h6 * (0.125*v2_v4+0.125*v5_v1+0.125*v3_v3+0.125*v4_v2+0.125*v1_v5+-0.125*v6_v0+0.125*v0_v6);
    tDelta(2, 3).block(n, n, n, n) = (0.5*v1) + h1 * (-1.5*v2) + h2 * (3.0*v3) + h3 * (-5.0*v4) + h4 * (7.5*v5) + h5 * (-10.5*v6) + h6 * (14.0*v7);
    tDelta(2, 4).resize(2*n, 2*n);
    tDelta(2, 4).block(0, 0, n, n) = (-1.5*v2) + h1 * (7.5*v3+-0.125*v0_v1+0.125*v1_v0) + h2 * (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+-22.5*v4) + h3 * (0.125*v3_v0+-0.125*v1_v2+-0.125*v0_v3+-0.125*v2_v1+52.5*v5) + h4 * (0.125*v2_v2+0.125*v3_v1+-105.0*v6+-0.125*v4_v0+0.125*v1_v3+0.125*v0_v4) + h5 * (-0.125*v2_v3+-0.125*v1_v4+-0.125*v4_v1+-0.125*v0_v5+0.125*v5_v0+-0.125*v3_v2+189.0*v7);
    tDelta(2, 4).block(0, n, n, n) = (0.5*v1) + h1 * (-1.5*v2) + h2 * (3.0*v3) + h3 * (-5.0*v4) + h4 * (7.5*v5) + h5 * (-10.5*v6);
    tDelta(2, 4).block(n, 0, n, n) = (-7.5*v3) + h1 * (-0.25*v1_v1+52.5*v4) + h2 * (0.25*v1_v2+0.75*v2_v1+-210.0*v5) + h3 * (-0.75*v2_v2+630.0*v6+-1.5*v3_v1+-0.25*v1_v3) + h4 * (0.75*v2_v3+2.5*v4_v1+0.25*v1_v4+-1575.0*v7+1.5*v3_v2) + h5 * (-0.75*v2_v4+-1.5*v3_v3+-0.25*v1_v5+-2.5*v4_v2+-3.75*v5_v1);
    tDelta(2, 4).block(n, n, n, n) = (1.5*v2) + h1 * (-0.125*v0_v1+-7.5*v3+0.125*v1_v0) + h2 * (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+22.5*v4) + h3 * (0.125*v3_v0+-0.125*v1_v2+-0.125*v0_v3+-0.125*v2_v1+-52.5*v5) + h4 * (0.125*v2_v2+0.125*v3_v1+105.0*v6+-0.125*v4_v0+0.125*v1_v3+0.125*v0_v4) + h5 * (-0.125*v2_v3+-0.125*v1_v4+-0.125*v4_v1+-0.125*v0_v5+0.125*v5_v0+-0.125*v3_v2+-189.0*v7);
    tDelta(2, 5).resize(2*n, 2*n);
    tDelta(2, 5).block(0, 0, n, n) = (-5.0*v3+0.0833333333333*v0_v1+-0.0833333333333*v1_v0) + h1 * (-0.25*v0_v2+-0.25*v1_v1+0.25*v2_v0+35.0*v4) + h2 * (-0.5*v3_v0+0.416666666667*v1_v2+0.5*v0_v3+0.583333333333*v2_v1+-140.0*v5) + h3 * (-0.75*v2_v2+-1.08333333333*v3_v1+420.0*v6+0.833333333333*v4_v0+-0.666666666667*v1_v3+-0.833333333333*v0_v4) + h4 * (1.0*v2_v3+1.0*v1_v4+1.75*v4_v1+1.25*v0_v5+-1.25*v5_v0+1.25*v3_v2+-1050.0*v7);
    tDelta(2, 5).block(0, n, n, n) = (1.0*v2) + h1 * (-5.0*v3) + h2 * (15.0*v4) + h3 * (-35.0*v5) + h4 * (70.0*v6);
    tDelta(2, 5).block(n, 0, n, n) = (0.0833333333333*v1_v1+-35.0*v4) + h1 * (-0.0208333333333*v1_v0_v0+0.0416666666667*v0_v1_v0+-1.0*v2_v1+-0.25*v1_v2+315.0*v5+-0.0208333333333*v0_v0_v1) + h2 * (0.0208333333333*v0_v1_v1+-0.0416666666667*v0_v2_v0+0.0208333333333*v1_v0_v1+1.5*v2_v2+0.5*v1_v3+-1575.0*v6+-0.0416666666667*v1_v1_v0+0.0208333333333*v0_v0_v2+4.25*v3_v1+0.0208333333333*v2_v0_v0) + h3 * (-2.25*v2_v3+-0.0208333333333*v1_v0_v2+-0.0208333333333*v2_v0_v1+-12.0833333333*v4_v1+-0.0208333333333*v0_v2_v1+-0.0208333333333*v1_v1_v1+0.0416666666667*v1_v2_v0+-0.0208333333333*v3_v0_v0+0.0416666666667*v0_v3_v0+5775.0*v7+0.0416666666667*v2_v1_v0+-5.25*v3_v2+-0.0208333333333*v0_v1_v2+-0.0208333333333*v0_v0_v3+-0.833333333333*v1_v4) + h4 * (3.25*v2_v4+0.0208333333333*v0_v0_v4+0.0208333333333*v0_v1_v3+-0.0416666666667*v1_v3_v0+0.0208333333333*v1_v0_v3+-0.0416666666667*v0_v4_v0+0.0208333333333*v4_v0_v0+6.75*v3_v3+0.0208333333333*v2_v0_v2+0.0208333333333*v3_v0_v1+0.0208333333333*v1_v2_v1+-0.0416666666667*v2_v2_v0+13.75*v4_v2+0.0208333333333*v1_v1_v2+-0.0416666666667*v3_v1_v0+1.25*v1_v5+0.0208333333333*v0_v3_v1+27.5*v5_v1+0.0208333333333*v0_v2_v2+0.0208333333333*v2_v1_v1);
    tDelta(2, 5).block(n, n, n, n) = (0.0833333333333*v0_v1+5.0*v3+-0.0833333333333*v1_v0) + h1 * (-0.25*v0_v2+-0.25*v1_v1+0.25*v2_v0+-35.0*v4) + h2 * (-0.5*v3_v0+0.416666666667*v1_v2+0.5*v0_v3+0.583333333333*v2_v1+140.0*v5) + h3 * (-0.75*v2_v2+-1.08333333333*v3_v1+-420.0*v6+0.833333333333*v4_v0+-0.666666666667*v1_v3+-0.833333333333*v0_v4) + h4 * (1.0*v2_v3+1.0*v1_v4+1.75*v4_v1+1.25*v0_v5+-1.25*v5_v0+1.25*v3_v2+1050.0*v7);
    tDelta(2, 6).resize(2*n, 2*n);
    tDelta(2, 6).block(0, 0, n, n) = (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+-17.5*v4) + h1 * (0.625*v3_v0+-0.5*v1_v2+-0.625*v0_v3+-0.75*v2_v1+157.5*v5) + h2 * (1.625*v2_v2+2.625*v3_v1+-787.5*v6+-1.875*v4_v0+1.375*v1_v3+1.875*v0_v4) + h3 * (-3.25*v2_v3+-3.125*v1_v4+-6.875*v4_v1+-4.375*v0_v5+4.375*v5_v0+-4.25*v3_v2+2887.5*v7);
    tDelta(2, 6).block(0, n, n, n) = (2.5*v3) + h1 * (-17.5*v4) + h2 * (70.0*v5) + h3 * (-210.0*v6);
    tDelta(2, 6).block(n, 0, n, n) = (0.0104166666667*v1_v0_v0+-0.0208333333333*v0_v1_v0+0.375*v2_v1+0.125*v1_v2+-157.5*v5+0.0104166666667*v0_v0_v1) + h1 * (-0.03125*v0_v1_v1+0.0625*v0_v2_v0+-0.0416666666667*v1_v0_v1+-1.5*v2_v2+-0.625*v1_v3+1732.5*v6+0.0729166666667*v1_v1_v0+-0.03125*v0_v0_v2+-4.375*v3_v1+-0.03125*v2_v0_v0) + h2 * (4.125*v2_v3+-0.114583333333*v1_v2_v0+0.104166666667*v2_v0_v1+23.125*v4_v1+0.0729166666667*v0_v2_v1+0.0625*v1_v1_v1+0.0625*v1_v0_v2+0.0625*v3_v0_v0+-0.125*v0_v3_v0+-10395.0*v7+-0.177083333333*v2_v1_v0+8.875*v3_v2+0.0520833333333*v0_v1_v2+0.0625*v0_v0_v3+1.875*v1_v4) + h3 * (-9.375*v2_v4+-0.104166666667*v0_v0_v4+-0.0833333333333*v0_v1_v3+0.177083333333*v1_v3_v0+-0.09375*v1_v0_v3+0.208333333333*v0_v4_v0+-0.104166666667*v4_v0_v0+-17.5*v3_v3+-0.125*v2_v0_v2+-0.197916666667*v3_v0_v1+-0.104166666667*v1_v2_v1+0.21875*v2_v2_v0+-35.625*v4_v2+-0.0833333333333*v1_v1_v2+0.333333333333*v3_v1_v0+-4.375*v1_v5+-0.135416666667*v0_v3_v1+-83.125*v5_v1+-0.09375*v0_v2_v2+-0.125*v2_v1_v1);
    tDelta(2, 6).block(n, n, n, n) = (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+17.5*v4) + h1 * (0.625*v3_v0+-0.5*v1_v2+-0.625*v0_v3+-0.75*v2_v1+-157.5*v5) + h2 * (1.625*v2_v2+2.625*v3_v1+787.5*v6+-1.875*v4_v0+1.375*v1_v3+1.875*v0_v4) + h3 * (-3.25*v2_v3+-3.125*v1_v4+-6.875*v4_v1+-4.375*v0_v5+4.375*v5_v0+-4.25*v3_v2+-2887.5*v7);
    tDelta(2, 7).resize(2*n, 2*n);
    tDelta(2, 7).block(0, 0, n, n) = (-0.25*v3_v0+0.2*v1_v2+0.25*v0_v3+0.3*v2_v1+-63.0*v5) + h1 * (-1.5*v2_v2+-2.5*v3_v1+693.0*v6+1.75*v4_v0+-1.25*v1_v3+-1.75*v0_v4) + h2 * (5.05*v2_v3+4.75*v1_v4+11.5*v4_v1+7.0*v0_v5+-7.0*v5_v0+6.7*v3_v2+-4158.0*v7);
    tDelta(2, 7).block(0, n, n, n) = (7.0*v4) + h1 * (-63.0*v5) + h2 * (315.0*v6);
    tDelta(2, 7).block(n, 0, n, n) = (0.0125*v0_v1_v1+-0.025*v0_v2_v0+0.0166666666667*v1_v0_v1+0.6*v2_v2+0.25*v1_v3+-693.0*v6+-0.0291666666667*v1_v1_v0+0.0125*v0_v0_v2+1.5*v3_v1+0.0125*v2_v0_v0) + h1 * (-3.75*v2_v3+-0.0625*v1_v0_v2+-0.125*v2_v0_v1+-19.25*v4_v1+-0.075*v0_v2_v1+-0.0625*v1_v1_v1+0.1125*v1_v2_v0+-0.0625*v3_v0_v0+0.125*v0_v3_v0+9009.0*v7+0.2*v2_v1_v0+-7.5*v3_v2+-0.05*v0_v1_v2+-0.0625*v0_v0_v3+-1.75*v1_v4) + h2 * (14.25*v2_v4+0.1875*v0_v0_v4+0.1375*v0_v1_v3+-0.3*v1_v3_v0+0.1625*v1_v0_v3+-0.375*v0_v4_v0+0.1875*v4_v0_v0+25.5*v3_v3+0.2375*v2_v0_v2+0.475*v3_v0_v1+0.191666666667*v1_v2_v1+-0.4*v2_v2_v0+49.25*v4_v2+0.133333333333*v1_v1_v2+-0.7375*v3_v1_v0+7.0*v1_v5+0.2625*v0_v3_v1+120.75*v5_v1+0.1625*v0_v2_v2+0.2375*v2_v1_v1);
    tDelta(2, 7).block(n, n, n, n) = (-0.25*v3_v0+0.2*v1_v2+0.25*v0_v3+0.3*v2_v1+63.0*v5) + h1 * (-1.5*v2_v2+-2.5*v3_v1+-693.0*v6+1.75*v4_v0+-1.25*v1_v3+-1.75*v0_v4) + h2 * (5.05*v2_v3+4.75*v1_v4+11.5*v4_v1+7.0*v0_v5+-7.0*v5_v0+6.7*v3_v2+4158.0*v7);
    tDelta(2, 8).resize(2*n, 2*n);
    tDelta(2, 8).block(0, 0, n, n) = (0.5*v2_v2+0.833333333333*v3_v1+-231.0*v6+-0.583333333333*v4_v0+0.416666666667*v1_v3+0.583333333333*v0_v4) + h1 * (-3.75*v2_v3+-3.5*v1_v4+-8.75*v4_v1+-5.25*v0_v5+5.25*v5_v0+-5.0*v3_v2+3003.0*v7);
    tDelta(2, 8).block(0, n, n, n) = (21.0*v5) + h1 * (-231.0*v6);
    tDelta(2, 8).block(n, 0, n, n) = (1.25*v2_v3+0.0208333333333*v1_v0_v2+0.0416666666667*v2_v0_v1+5.83333333333*v4_v1+0.025*v0_v2_v1+0.0208333333333*v1_v1_v1+-0.0375*v1_v2_v0+0.0208333333333*v3_v0_v0+-0.0416666666667*v0_v3_v0+-3003.0*v7+-0.0666666666667*v2_v1_v0+2.5*v3_v2+0.0166666666667*v0_v1_v2+0.0208333333333*v0_v0_v3+0.583333333333*v1_v4) + h1 * (-10.5*v2_v4+-0.145833333333*v0_v0_v4+-0.104166666667*v0_v1_v3+0.229166666667*v1_v3_v0+-0.125*v1_v0_v3+0.291666666667*v0_v4_v0+-0.145833333333*v4_v0_v0+-18.75*v3_v3+-0.1875*v2_v0_v2+-0.416666666667*v3_v0_v1+-0.15*v1_v2_v1+0.3125*v2_v2_v0+-35.0*v4_v2+-0.1*v1_v1_v2+0.625*v3_v1_v0+-5.25*v1_v5+-0.208333333333*v0_v3_v1+-84.0*v5_v1+-0.125*v0_v2_v2+-0.1875*v2_v1_v1);
    tDelta(2, 8).block(n, n, n, n) = (0.5*v2_v2+0.833333333333*v3_v1+231.0*v6+-0.583333333333*v4_v0+0.416666666667*v1_v3+0.583333333333*v0_v4) + h1 * (-3.75*v2_v3+-3.5*v1_v4+-8.75*v4_v1+-5.25*v0_v5+5.25*v5_v0+-5.0*v3_v2+-3003.0*v7);
    tDelta(2, 9).resize(2*n, 2*n);
    tDelta(2, 9).block(0, 0, n, n) = 1.07142857143*v2_v3+1.0*v1_v4+2.5*v4_v1+1.5*v0_v5+-1.5*v5_v0+1.42857142857*v3_v2+-858.0*v7;
    tDelta(2, 9).block(0, n, n, n) = 66.0*v6;
    tDelta(2, 9).block(n, 0, n, n) = 3.0*v2_v4+0.0416666666667*v0_v0_v4+0.0297619047619*v0_v1_v3+-0.0654761904762*v1_v3_v0+0.0357142857143*v1_v0_v3+-0.0833333333333*v0_v4_v0+0.0416666666667*v4_v0_v0+5.35714285714*v3_v3+0.0535714285714*v2_v0_v2+0.119047619048*v3_v0_v1+0.0428571428571*v1_v2_v1+-0.0892857142857*v2_v2_v0+10.0*v4_v2+0.0285714285714*v1_v1_v2+-0.178571428571*v3_v1_v0+1.5*v1_v5+0.0595238095238*v0_v3_v1+22.5*v5_v1+0.0357142857143*v0_v2_v2+0.0535714285714*v2_v1_v1;
    tDelta(2, 9).block(n, n, n, n) = 1.07142857143*v2_v3+1.0*v1_v4+2.5*v4_v1+1.5*v0_v5+-1.5*v5_v0+1.42857142857*v3_v2+858.0*v7;
    tH[2].resize(2*n, 2*n);
    tH[2].block(0, 0, n, n) = h3 * (-0.5*v1);
    tH[2].block(0, 0, n, n) += h5 * (-0.5*v3+-0.0416666666667*v0_v1+0.0416666666667*v1_v0);
    tH[2].block(0, 0, n, n) += h7 * (-0.00833333333333*v1_v2+-0.5*v5+0.00833333333333*v2_v1);
    tH[2].block(0, 0, n, n) += h9 * (-0.00357142857143*v2_v3+-0.5*v7+0.00357142857143*v3_v2);
    tH[2].block(0, n, n, n) = MatrixXs::Zero(n,n);
    tH[2].block(n, 0, n, n) = h3 * (-1.5*v2);
    tH[2].block(n, 0, n, n) += h4 * (-0.125*v0_v1+0.125*v1_v0);
    tH[2].block(n, 0, n, n) += h5 * (0.125*v0_v2+-0.0416666666667*v1_v1+-0.125*v2_v0+-5.0*v4);
    tH[2].block(n, 0, n, n) += h6 * (0.125*v3_v0+-0.125*v0_v3+-0.0104166666667*v1_v0_v0+0.0208333333333*v0_v1_v0+-0.0104166666667*v0_v0_v1);
    tH[2].block(n, 0, n, n) += h7 * (0.00208333333333*v1_v1_v0+-0.00416666666667*v0_v2_v0+-0.00416666666667*v1_v0_v1+-0.025*v2_v2+-10.5*v6+0.00208333333333*v0_v1_v1+-0.125*v4_v0+0.00208333333333*v0_v0_v2+0.00208333333333*v2_v0_v0+0.125*v0_v4);
    tH[2].block(n, 0, n, n) += h8 * (0.00208333333333*v1_v2_v0+-0.125*v0_v5+0.00208333333333*v0_v2_v1+0.125*v5_v0+-0.00208333333333*v2_v1_v0+-0.00208333333333*v0_v1_v2);
    tH[2].block(n, 0, n, n) += h9 * (0.000595238095238*v3_v1_v0+-0.000595238095238*v2_v0_v2+0.000297619047619*v1_v0_v3+-0.0178571428571*v3_v3+-18.0*v8+0.00119047619048*v1_v2_v1+0.000595238095238*v0_v1_v3+-0.000595238095238*v1_v1_v2+0.000297619047619*v2_v2_v0+0.125*v0_v6+-0.000892857142857*v1_v3_v0+-0.125*v6_v0+-0.000595238095238*v2_v1_v1+-0.000892857142857*v0_v3_v1+0.000297619047619*v0_v2_v2+0.000297619047619*v3_v0_v1);
    tH[2].block(n, 0, n, n) += h10 * (0.125*v7_v0+-0.125*v0_v7+0.000892857142857*v0_v3_v2+-0.000892857142857*v0_v2_v3+0.000892857142857*v2_v3_v0+-0.000892857142857*v3_v2_v0);
    tH[2].block(n, n, n, n) = h3 * (0.5*v1);
    tH[2].block(n, n, n, n) += h5 * (-0.0416666666667*v0_v1+0.5*v3+0.0416666666667*v1_v0);
    tH[2].block(n, n, n, n) += h7 * (-0.00833333333333*v1_v2+0.5*v5+0.00833333333333*v2_v1);
    tH[2].block(n, n, n, n) += h9 * (-0.00357142857143*v2_v3+0.5*v7+0.00357142857143*v3_v2);
    tDelta(3, 0) = MatrixXs::Zero(2*n, 2*n);
    tDelta(3, 1) = MatrixXs::Zero(2*n, 2*n);
    tDelta(3, 2) = MatrixXs::Zero(2*n, 2*n);
    tDelta(3, 3) = MatrixXs::Zero(2*n, 2*n);
    tDelta(3, 4) = MatrixXs::Zero(2*n, 2*n);
    tDelta(3, 5).resize(2*n, 2*n);
    tDelta(3, 5).block(0, 0, n, n) = (-0.166666666667*v0_v1+2.5*v3+0.166666666667*v1_v0) + h1 * (0.5*v0_v2+0.25*v1_v1+-0.5*v2_v0+-17.5*v4) + h2 * (1.0*v3_v0+-0.583333333333*v1_v2+-1.0*v0_v3+-0.416666666667*v2_v1+70.0*v5) + h3 * (0.75*v2_v2+0.666666666667*v3_v1+-210.0*v6+-1.66666666667*v4_v0+1.08333333333*v1_v3+1.66666666667*v0_v4) + h4 * (-1.25*v2_v3+-1.75*v1_v4+-1.0*v4_v1+-2.5*v0_v5+2.5*v5_v0+-1.0*v3_v2+525.0*v7);
    tDelta(3, 5).block(0, n, n, n) = (-0.5*v2) + h1 * (2.5*v3+-0.125*v0_v1+0.125*v1_v0) + h2 * (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+-7.5*v4) + h3 * (0.125*v3_v0+-0.125*v1_v2+-0.125*v0_v3+17.5*v5+-0.125*v2_v1) + h4 * (0.125*v2_v2+0.125*v1_v3+-35.0*v6+-0.125*v4_v0+0.125*v3_v1+0.125*v0_v4);
    tDelta(3, 5).block(n, 0, n, n) = (-0.375*v0_v2+-0.291666666667*v1_v1+0.375*v2_v0+17.5*v4) + h1 * (-0.0208333333333*v1_v0_v0+0.0416666666667*v0_v1_v0+-1.875*v3_v0+1.875*v0_v3+-157.5*v5+1.25*v1_v2+1.25*v2_v1+-0.0208333333333*v0_v0_v1) + h2 * (0.0208333333333*v0_v1_v1+-0.0416666666667*v0_v2_v0+0.0208333333333*v1_v0_v1+-3.375*v2_v2+-3.625*v1_v3+787.5*v6+-0.0416666666667*v1_v1_v0+5.625*v4_v0+0.0208333333333*v0_v0_v2+-3.625*v3_v1+0.0208333333333*v2_v0_v0+-5.625*v0_v4) + h3 * (7.5*v2_v3+-0.0208333333333*v1_v0_v2+-0.0208333333333*v2_v0_v1+8.54166666667*v4_v1+-0.0208333333333*v0_v2_v1+-0.0208333333333*v1_v1_v1+0.0416666666667*v1_v2_v0+-0.0208333333333*v0_v0_v3+0.0416666666667*v0_v3_v0+13.125*v0_v5+-13.125*v5_v0+0.0416666666667*v2_v1_v0+7.5*v3_v2+-2887.5*v7+-0.0208333333333*v3_v0_v0+-0.0208333333333*v0_v1_v2+8.54166666667*v1_v4) + h4 * (0.0208333333333*v0_v0_v4+-0.0416666666667*v0_v4_v0+0.0208333333333*v4_v0_v0+0.0208333333333*v1_v2_v1+-0.0416666666667*v1_v3_v0+-14.75*v2_v4+-14.25*v3_v3+0.0208333333333*v2_v0_v2+-0.0416666666667*v2_v2_v0+26.25*v6_v0+0.0208333333333*v0_v1_v3+0.0208333333333*v2_v1_v1+0.0208333333333*v1_v0_v3+-17.5*v5_v1+-0.0416666666667*v3_v1_v0+-26.25*v0_v6+0.0208333333333*v0_v2_v2+0.0208333333333*v3_v0_v1+-14.75*v4_v2+0.0208333333333*v1_v1_v2+-17.5*v1_v5+0.0208333333333*v0_v3_v1);
    tDelta(3, 5).block(n, n, n, n) = (-2.5*v3+0.0833333333333*v0_v1+-0.0833333333333*v1_v0) + h1 * (-0.25*v0_v2+-0.25*v1_v1+0.25*v2_v0+17.5*v4) + h2 * (-0.5*v3_v0+0.416666666667*v1_v2+0.5*v0_v3+0.583333333333*v2_v1+-70.0*v5) + h3 * (-0.75*v2_v2+-1.08333333333*v3_v1+210.0*v6+0.833333333333*v4_v0+-0.666666666667*v1_v3+-0.833333333333*v0_v4) + h4 * (1.0*v2_v3+1.0*v1_v4+1.75*v4_v1+1.25*v0_v5+-1.25*v5_v0+1.25*v3_v2+-525.0*v7);
    tDelta(3, 6).resize(2*n, 2*n);
    tDelta(3, 6).block(0, 0, n, n) = (-0.375*v0_v2+-0.291666666667*v1_v1+0.375*v2_v0+17.5*v4) + h1 * (-0.0208333333333*v1_v0_v0+0.0416666666667*v0_v1_v0+-1.875*v3_v0+1.875*v0_v3+1.25*v2_v1+1.25*v1_v2+-157.5*v5+-0.0208333333333*v0_v0_v1) + h2 * (-0.0416666666667*v1_v1_v0+-0.0416666666667*v0_v2_v0+0.0208333333333*v1_v0_v1+-3.375*v2_v2+-3.625*v1_v3+787.5*v6+0.0208333333333*v0_v1_v1+5.625*v4_v0+0.0208333333333*v0_v0_v2+-3.625*v3_v1+0.0208333333333*v2_v0_v0+-5.625*v0_v4) + h3 * (7.5*v2_v3+-0.0208333333333*v1_v0_v2+-0.0208333333333*v2_v0_v1+13.125*v0_v5+-0.0208333333333*v0_v2_v1+-0.0208333333333*v1_v1_v1+0.0416666666667*v1_v2_v0+-0.0208333333333*v0_v0_v3+0.0416666666667*v0_v3_v0+8.54166666667*v4_v1+-13.125*v5_v0+0.0416666666667*v2_v1_v0+7.5*v3_v2+-0.0208333333333*v0_v1_v2+-0.0208333333333*v3_v0_v0+-2887.5*v7+8.54166666667*v1_v4);
    tDelta(3, 6).block(0, n, n, n) = (-2.5*v3+0.0833333333333*v0_v1+-0.0833333333333*v1_v0) + h1 * (-0.25*v0_v2+-0.25*v1_v1+0.25*v2_v0+17.5*v4) + h2 * (-0.5*v3_v0+0.416666666667*v1_v2+0.5*v0_v3+-70.0*v5+0.583333333333*v2_v1) + h3 * (-0.75*v2_v2+-0.666666666667*v1_v3+210.0*v6+0.833333333333*v4_v0+-1.08333333333*v3_v1+-0.833333333333*v0_v4);
    tDelta(3, 6).block(n, 0, n, n) = (-0.0104166666667*v1_v0_v0+0.0208333333333*v0_v1_v0+1.25*v3_v0+-1.25*v0_v3+157.5*v5+-1.125*v1_v2+-1.375*v2_v1+-0.0104166666667*v0_v0_v1) + h1 * (0.0520833333333*v1_v1_v0+-0.0625*v0_v2_v0+-0.0416666666667*v1_v0_v1+7.5*v2_v2+6.875*v1_v3+-1732.5*v6+-0.0104166666667*v0_v1_v1+-8.75*v4_v0+0.03125*v0_v0_v2+9.375*v3_v1+0.03125*v2_v0_v0+8.75*v0_v4) + h2 * (-26.375*v2_v3+-0.0104166666667*v1_v2_v0+0.145833333333*v2_v0_v1+-38.125*v4_v1+0.0520833333333*v0_v2_v1+0.0625*v1_v1_v1+0.0208333333333*v1_v0_v2+-0.0625*v0_v0_v3+0.125*v0_v3_v0+-35.0*v0_v5+35.0*v5_v0+-0.197916666667*v2_v1_v0+-29.875*v3_v2+10395.0*v7+-0.0625*v3_v0_v0+-0.0104166666667*v0_v1_v2+-25.625*v1_v4) + h3 * (0.104166666667*v0_v0_v4+-0.208333333333*v0_v4_v0+0.104166666667*v4_v0_v0+-0.104166666667*v1_v2_v1+-0.0520833333333*v1_v3_v0+73.125*v2_v4+78.75*v3_v3+-0.125*v2_v0_v2+0.15625*v2_v2_v0+-105.0*v6_v0+0.0416666666667*v0_v1_v3+-0.166666666667*v2_v1_v1+0.0104166666667*v1_v0_v3+118.125*v5_v1+0.416666666667*v3_v1_v0+105.0*v0_v6+-0.03125*v0_v2_v2+-0.302083333333*v3_v0_v1+90.625*v4_v2+-0.0416666666667*v1_v1_v2+74.375*v1_v5+-0.114583333333*v0_v3_v1);
    tDelta(3, 6).block(n, n, n, n) = (0.125*v0_v2+0.208333333333*v1_v1+-0.125*v2_v0+-17.5*v4) + h1 * (-0.0208333333333*v1_v0_v0+0.0416666666667*v0_v1_v0+0.625*v3_v0+-0.625*v0_v3+-1.25*v2_v1+-0.75*v1_v2+157.5*v5+-0.0208333333333*v0_v0_v1) + h2 * (-0.0416666666667*v1_v1_v0+-0.0416666666667*v0_v2_v0+0.0208333333333*v1_v0_v1+2.625*v2_v2+1.875*v1_v3+-787.5*v6+0.0208333333333*v0_v1_v1+-1.875*v4_v0+0.0208333333333*v0_v0_v2+4.375*v3_v1+0.0208333333333*v2_v0_v0+1.875*v0_v4) + h3 * (-5.0*v2_v3+-0.0208333333333*v1_v0_v2+-0.0208333333333*v2_v0_v1+-11.4583333333*v4_v1+-0.0208333333333*v0_v2_v1+-0.0208333333333*v1_v1_v1+0.0416666666667*v1_v2_v0+-0.0208333333333*v0_v0_v3+0.0416666666667*v0_v3_v0+-4.375*v0_v5+4.375*v5_v0+0.0416666666667*v2_v1_v0+-7.0*v3_v2+2887.5*v7+-0.0208333333333*v3_v0_v0+-0.0208333333333*v0_v1_v2+-3.95833333333*v1_v4);
    tDelta(3, 7).resize(2*n, 2*n);
    tDelta(3, 7).block(0, 0, n, n) = (0.0104166666667*v1_v0_v0+-0.0208333333333*v0_v1_v0+1.0*v3_v0+-1.0*v0_v3+-0.825*v2_v1+-0.675*v1_v2+94.5*v5+0.0104166666667*v0_v0_v1) + h1 * (0.0729166666667*v1_v1_v0+0.0625*v0_v2_v0+-0.0416666666667*v1_v0_v1+4.5*v2_v2+4.375*v1_v3+-1039.5*v6+-0.03125*v0_v1_v1+-7.0*v4_v0+-0.03125*v0_v0_v2+5.625*v3_v1+-0.03125*v2_v0_v0+7.0*v0_v4) + h2 * (-16.075*v2_v3+-0.114583333333*v1_v2_v0+0.104166666667*v2_v0_v1+-28.0*v0_v5+0.0729166666667*v0_v2_v1+0.0625*v1_v1_v1+0.0625*v1_v0_v2+0.0625*v0_v0_v3+-0.125*v0_v3_v0+-22.875*v4_v1+28.0*v5_v0+-0.177083333333*v2_v1_v0+-17.925*v3_v2+0.0520833333333*v0_v1_v2+0.0625*v3_v0_v0+6237.0*v7+-17.125*v1_v4);
    tDelta(3, 7).block(0, n, n, n) = (0.125*v0_v2+0.125*v1_v1+-0.125*v2_v0+-10.5*v4) + h1 * (0.625*v3_v0+-0.5*v1_v2+-0.625*v0_v3+94.5*v5+-0.75*v2_v1) + h2 * (1.625*v2_v2+1.375*v1_v3+-472.5*v6+-1.875*v4_v0+2.625*v3_v1+1.875*v0_v4);
    tDelta(3, 7).block(n, 0, n, n) = (0.0125*v1_v1_v0+0.0375*v0_v2_v0+-0.00416666666667*v1_v0_v1+-4.275*v2_v2+-3.5*v1_v3+1039.5*v6+-0.00833333333333*v0_v1_v1+4.375*v4_v0+-0.01875*v0_v0_v2+-6.0*v3_v1+-0.01875*v2_v0_v0+-4.375*v0_v4) + h1 * (31.875*v2_v3+-0.0078125*v0_v1_v0_v0+0.03125*v1_v0_v2+39.375*v3_v2+-0.15625*v2_v0_v1+55.125*v4_v1+-0.00260416666667*v0_v0_v0_v1+-0.0416666666667*v1_v1_v1+28.875*v1_v4+0.09375*v0_v0_v3+-0.1875*v0_v3_v0+0.04375*v0_v1_v2+-39.375*v5_v0+0.16875*v2_v1_v0+-0.075*v1_v2_v0+-13513.5*v7+0.0078125*v0_v0_v1_v0+0.09375*v3_v0_v0+0.00260416666667*v1_v0_v0_v0+-0.0125*v0_v2_v1+39.375*v0_v5) + h2 * (-0.28125*v0_v0_v4+0.00260416666667*v0_v0_v0_v2+0.5625*v0_v4_v0+-0.28125*v4_v0_v0+0.170833333333*v1_v2_v1+0.00260416666667*v0_v0_v1_v1+-0.00260416666667*v2_v0_v0_v0+0.2625*v1_v3_v0+-142.0*v2_v4+-163.875*v3_v3+0.1125*v2_v0_v2+-0.00208333333333*v1_v1_v2+-0.0078125*v0_v1_v1_v0+-0.05625*v2_v2_v0+196.875*v6_v0+-0.14375*v0_v1_v3+0.0078125*v1_v1_v0_v0+-203.25*v4_v2+-0.0078125*v0_v0_v2_v0+-0.11875*v1_v0_v3+-0.0078125*v1_v0_v1_v0+0.0078125*v0_v2_v0_v0+-196.875*v0_v6+0.00260416666667*v1_v0_v0_v1+-286.125*v5_v1+-0.05625*v0_v2_v2+0.81875*v3_v0_v1+0.310416666667*v2_v1_v1+-0.95625*v3_v1_v0+-137.375*v1_v5+0.1375*v0_v3_v1+0.00260416666667*v0_v1_v0_v1);
    tDelta(3, 7).block(n, n, n, n) = (0.0104166666667*v1_v0_v0+-0.0208333333333*v0_v1_v0+-0.25*v3_v0+0.25*v0_v3+0.675*v2_v1+0.325*v1_v2+-94.5*v5+0.0104166666667*v0_v0_v1) + h1 * (0.0729166666667*v1_v1_v0+0.0625*v0_v2_v0+-0.0416666666667*v1_v0_v1+-3.0*v2_v2+-1.875*v1_v3+1039.5*v6+-0.03125*v0_v1_v1+1.75*v4_v0+-0.03125*v0_v0_v2+-5.625*v3_v1+-0.03125*v2_v0_v0+-1.75*v0_v4) + h2 * (9.175*v2_v3+0.0625*v1_v0_v2+0.104166666667*v2_v0_v1+25.875*v4_v1+0.0729166666667*v0_v2_v1+0.0625*v1_v1_v1+-0.114583333333*v1_v2_v0+0.0625*v0_v0_v3+-0.125*v0_v3_v0+7.0*v0_v5+-7.0*v5_v0+-0.177083333333*v2_v1_v0+14.325*v3_v2+-6237.0*v7+0.0625*v3_v0_v0+0.0520833333333*v0_v1_v2+6.625*v1_v4);
    tDelta(3, 8).resize(2*n, 2*n);
    tDelta(3, 8).block(0, 0, n, n) = (-0.0291666666667*v1_v1_v0+-0.025*v0_v2_v0+0.0166666666667*v1_v0_v1+-1.9*v2_v2+-1.83333333333*v1_v3+462.0*v6+0.0125*v0_v1_v1+2.91666666667*v4_v0+0.0125*v0_v0_v2+-2.66666666667*v3_v1+0.0125*v2_v0_v0+-2.91666666667*v0_v4) + h1 * (15.0*v2_v3+-0.0625*v1_v0_v2+-0.125*v2_v0_v1+26.25*v0_v5+-0.075*v0_v2_v1+-0.0625*v1_v1_v1+0.1125*v1_v2_v0+-0.0625*v0_v0_v3+0.125*v0_v3_v0+24.5*v4_v1+-26.25*v5_v0+0.2*v2_v1_v0+17.5*v3_v2+-0.05*v0_v1_v2+-0.0625*v3_v0_v0+-6006.0*v7+15.75*v1_v4);
    tDelta(3, 8).block(0, n, n, n) = (-0.25*v3_v0+0.2*v1_v2+0.25*v0_v3+-42.0*v5+0.3*v2_v1) + h1 * (-1.5*v2_v2+-1.25*v1_v3+462.0*v6+1.75*v4_v0+-2.5*v3_v1+-1.75*v0_v4);
    tDelta(3, 8).block(n, 0, n, n) = (-13.0*v2_v3+0.003125*v0_v1_v0_v0+-0.0166666666667*v1_v0_v2+0.0166666666667*v2_v0_v1+-15.75*v0_v5+0.00104166666667*v0_v0_v0_v1+6006.0*v7+0.0375*v1_v2_v0+-0.0416666666667*v3_v0_v0+0.0833333333333*v0_v3_v0+-25.6666666667*v4_v1+15.75*v5_v0+-0.00416666666667*v2_v1_v0+-17.0*v3_v2+-0.0208333333333*v0_v1_v2+-0.003125*v0_v0_v1_v0+-0.0416666666667*v0_v0_v3+-0.00104166666667*v1_v0_v0_v0+-0.0125*v0_v2_v1+-11.6666666667*v1_v4) + h1 * (0.291666666667*v0_v0_v4+-0.003125*v0_v0_v0_v2+-0.583333333333*v0_v4_v0+0.291666666667*v4_v0_v0+-0.0875*v1_v2_v1+-0.003125*v0_v0_v1_v1+0.003125*v2_v0_v0_v0+-0.270833333333*v1_v3_v0+126.0*v2_v4+150.0*v3_v3+0.0375*v1_v1_v2+0.0104166666667*v0_v1_v1_v0+-0.1*v2_v2_v0+-173.25*v6_v0+0.145833333333*v0_v1_v3+-0.0125*v1_v1_v0_v0+-0.2*v2_v1_v1+0.009375*v0_v0_v2_v0+0.125*v1_v0_v3+0.0145833333333*v1_v0_v1_v0+-0.009375*v0_v2_v0_v0+173.25*v0_v6+-0.00520833333333*v1_v0_v0_v1+294.0*v5_v1+0.1*v0_v2_v2+-0.666666666667*v3_v0_v1+196.0*v4_v2+0.6875*v3_v1_v0+120.75*v1_v5+-0.0208333333333*v0_v3_v1+-0.00416666666667*v0_v1_v0_v1);
    tDelta(3, 8).block(n, n, n, n) = (-0.0291666666667*v1_v1_v0+-0.025*v0_v2_v0+0.0166666666667*v1_v0_v1+1.1*v2_v2+0.666666666667*v1_v3+-462.0*v6+0.0125*v0_v1_v1+-0.583333333333*v4_v0+0.0125*v0_v0_v2+2.33333333333*v3_v1+0.0125*v2_v0_v0+0.583333333333*v0_v4) + h1 * (-7.5*v2_v3+-0.0625*v1_v0_v2+-0.125*v2_v0_v1+-24.5*v4_v1+-0.075*v0_v2_v1+-0.0625*v1_v1_v1+0.1125*v1_v2_v0+-0.0625*v0_v0_v3+0.125*v0_v3_v0+-5.25*v0_v5+5.25*v5_v0+0.2*v2_v1_v0+-12.5*v3_v2+6006.0*v7+-0.0625*v3_v0_v0+-0.05*v0_v1_v2+-5.25*v1_v4);
    tDelta(3, 9).resize(2*n, 2*n);
    tDelta(3, 9).block(0, 0, n, n) = -5.17857142857*v2_v3+0.0208333333333*v1_v0_v2+0.0416666666667*v2_v0_v1+-9.0*v0_v5+0.025*v0_v2_v1+0.0208333333333*v1_v1_v1+-0.0375*v1_v2_v0+0.0208333333333*v0_v0_v3+-0.0416666666667*v0_v3_v0+-9.16666666667*v4_v1+9.0*v5_v0+-0.0666666666667*v2_v1_v0+-6.07142857143*v3_v2+0.0166666666667*v0_v1_v2+0.0208333333333*v3_v0_v0+2145.0*v7+-5.41666666667*v1_v4;
    tDelta(3, 9).block(0, n, n, n) = 0.5*v2_v2+0.416666666667*v1_v3+-165.0*v6+-0.583333333333*v4_v0+0.833333333333*v3_v1+0.583333333333*v0_v4;
    tDelta(3, 9).block(n, 0, n, n) = -0.104166666667*v0_v0_v4+0.00104166666667*v0_v0_v0_v2+0.208333333333*v0_v4_v0+-0.104166666667*v4_v0_v0+0.00535714285714*v1_v2_v1+0.00104166666667*v0_v0_v1_v1+-0.00104166666667*v2_v0_v0_v0+0.10119047619*v1_v3_v0+-42.5*v2_v4+-50.8928571429*v3_v3+-0.00892857142857*v2_v0_v2+-0.0172619047619*v1_v1_v2+-0.00347222222222*v0_v1_v1_v0+0.0482142857143*v2_v2_v0+57.75*v6_v0+-0.0535714285714*v0_v1_v3+0.00416666666667*v1_v1_v0_v0+-68.75*v4_v2+-0.003125*v0_v0_v2_v0+-0.047619047619*v1_v0_v3+-0.00486111111111*v1_v0_v1_v0+0.003125*v0_v2_v0_v0+-57.75*v0_v6+0.00173611111111*v1_v0_v0_v1+-108.75*v5_v1+-0.0392857142857*v0_v2_v2+0.119047619048*v3_v0_v1+0.0327380952381*v2_v1_v1+-0.0952380952381*v3_v1_v0+-40.5*v1_v5+-0.0238095238095*v0_v3_v1+0.00138888888889*v0_v1_v0_v1;
    tDelta(3, 9).block(n, n, n, n) = 2.32142857143*v2_v3+0.0208333333333*v1_v0_v2+0.0416666666667*v2_v0_v1+8.33333333333*v4_v1+0.025*v0_v2_v1+0.0208333333333*v1_v1_v1+-0.0375*v1_v2_v0+0.0208333333333*v0_v0_v3+-0.0416666666667*v0_v3_v0+1.5*v0_v5+-1.5*v5_v0+-0.0666666666667*v2_v1_v0+3.92857142857*v3_v2+-2145.0*v7+0.0208333333333*v3_v0_v0+0.0166666666667*v0_v1_v2+1.58333333333*v1_v4;
    tH[3].resize(2*n, 2*n);
    tH[3].block(0, 0, n, n) = h5 * (-0.166666666667*v0_v1+2.5*v3+0.166666666667*v1_v0);
    tH[3].block(0, 0, n, n) += h6 * (0.125*v0_v2+-0.0416666666667*v1_v1+-0.125*v2_v0);
    tH[3].block(0, 0, n, n) += h7 * (-0.0104166666667*v1_v0_v0+0.0208333333333*v0_v1_v0+0.125*v3_v0+-0.125*v0_v3+7.0*v5+-0.00833333333333*v1_v2+0.00833333333333*v2_v1+-0.0104166666667*v0_v0_v1);
    tH[3].block(0, 0, n, n) += h8 * (0.00208333333333*v0_v1_v1+-0.00416666666667*v0_v2_v0+-0.00416666666667*v1_v0_v1+-0.025*v2_v2+0.00208333333333*v1_v1_v0+-0.125*v4_v0+0.00208333333333*v0_v0_v2+0.00208333333333*v2_v0_v0+0.125*v0_v4);
    tH[3].block(0, 0, n, n) += h9 * (-0.00357142857143*v2_v3+0.00208333333333*v1_v2_v0+-0.125*v0_v5+0.00208333333333*v0_v2_v1+13.5*v7+0.125*v5_v0+-0.00208333333333*v2_v1_v0+0.00357142857143*v3_v2+-0.00208333333333*v0_v1_v2);
    tH[3].block(0, 0, n, n) += h10 * (0.000595238095238*v3_v1_v0+-0.000892857142857*v0_v3_v1+0.000297619047619*v1_v0_v3+-0.0178571428571*v3_v3+-0.000595238095238*v2_v0_v2+0.00119047619048*v1_v2_v1+-0.000595238095238*v1_v1_v2+0.000297619047619*v2_v2_v0+0.125*v0_v6+-0.000892857142857*v1_v3_v0+-0.125*v6_v0+-0.000595238095238*v2_v1_v1+0.000595238095238*v0_v1_v3+0.000297619047619*v0_v2_v2+0.000297619047619*v3_v0_v1);
    tH[3].block(0, n, n, n) = h5 * (-0.5*v2);
    tH[3].block(0, n, n, n) += h6 * (-0.0416666666667*v0_v1+0.0416666666667*v1_v0);
    tH[3].block(0, n, n, n) += h7 * (-0.5*v4);
    tH[3].block(0, n, n, n) += h8 * (-0.00833333333333*v1_v2+0.00833333333333*v2_v1);
    tH[3].block(0, n, n, n) += h9 * (-0.5*v6);
    tH[3].block(0, n, n, n) += h10 * (-0.00357142857143*v2_v3+0.00357142857143*v3_v2);
    tH[3].block(n, 0, n, n) = h5 * (-0.375*v0_v2+-0.291666666667*v1_v1+0.375*v2_v0+17.5*v4);
    tH[3].block(n, 0, n, n) += h6 * (-0.03125*v1_v0_v0+0.0625*v0_v1_v0+-0.625*v3_v0+0.625*v0_v3+0.125*v1_v2+-0.125*v2_v1+-0.03125*v0_v0_v1);
    tH[3].block(n, 0, n, n) += h7 * (0.0229166666667*v1_v1_v0+-0.0666666666667*v0_v2_v0+-0.025*v1_v0_v1+-0.15*v2_v2+-0.25*v1_v3+94.5*v6+0.00208333333333*v0_v1_v1+1.25*v4_v0+0.0333333333333*v0_v0_v2+-0.25*v3_v1+0.0333333333333*v2_v0_v0+-1.25*v0_v4);
    tH[3].block(n, 0, n, n) += h8 * (-0.0046875*v0_v1_v0_v0+0.0145833333333*v1_v0_v2+-0.0145833333333*v2_v0_v1+-0.125*v4_v1+-0.0015625*v0_v0_v0_v1+0.125*v1_v4+-0.03125*v0_v0_v3+0.0625*v0_v3_v0+1.75*v0_v5+-1.75*v5_v0+0.00833333333333*v2_v1_v0+-0.00625*v1_v2_v0+-0.00833333333333*v0_v1_v2+0.0046875*v0_v0_v1_v0+-0.03125*v3_v0_v0+0.0015625*v1_v0_v0_v0+0.00625*v0_v2_v1);
    tH[3].block(n, 0, n, n) += h9 * (0.03125*v0_v0_v4+0.000520833333333*v0_v0_v0_v2+-0.0625*v0_v4_v0+0.03125*v4_v0_v0+0.00535714285714*v1_v2_v1+0.000520833333333*v0_v0_v1_v1+-0.000520833333333*v2_v0_v0_v0+-0.000892857142857*v1_v3_v0+-0.125*v2_v4+-0.267857142857*v3_v3+-0.000595238095238*v2_v0_v2+-0.000868055555556*v0_v1_v1_v0+0.00654761904762*v2_v2_v0+2.625*v6_v0+0.0110119047619*v0_v1_v3+-0.000520833333333*v1_v1_v0_v0+-0.00267857142857*v2_v1_v1+-0.0015625*v0_v0_v2_v0+-0.010119047619*v1_v0_v3+0.00190972222222*v1_v0_v1_v0+0.0015625*v0_v2_v0_v0+0.0110119047619*v3_v1_v0+-2.625*v0_v6+-0.000868055555556*v1_v0_v0_v1+-0.25*v5_v1+-0.00595238095238*v0_v2_v2+-0.010119047619*v3_v0_v1+297.0*v8+-0.125*v4_v2+-0.00267857142857*v1_v1_v2+-0.25*v1_v5+-0.000892857142857*v0_v3_v1+-0.000173611111111*v0_v1_v0_v1);
    tH[3].block(n, 0, n, n) += h10 * (0.00178571428571*v0_v2_v3+-0.000372023809524*v1_v0_v2_v0+-0.000223214285714*v2_v0_v0_v1+-0.0014880952381*v3_v1_v1+0.00357142857143*v0_v3_v2+0.000372023809524*v2_v1_v0_v0+0.000223214285714*v1_v0_v1_v1+-0.0104166666667*v4_v0_v1+-0.000372023809524*v0_v0_v1_v2+7.44047619048e-05*v2_v0_v1_v0+0.00178571428571*v2_v0_v3+7.44047619048e-05*v3_v0_v0_v0+3.375*v0_v7+0.0625*v0_v5_v0+-7.44047619048e-05*v0_v0_v0_v3+-0.03125*v0_v0_v5+-0.00357142857143*v2_v3_v0+-0.000223214285714*v0_v3_v0_v0+-0.00178571428571*v3_v2_v0+-3.375*v7_v0+-0.03125*v5_v0_v0+-0.000818452380952*v0_v2_v1_v0+0.00327380952381*v2_v2_v1+0.125*v3_v4+-0.000223214285714*v1_v2_v0_v0+0.000223214285714*v0_v0_v2_v1+0.0104166666667*v4_v1_v0+-0.00327380952381*v1_v2_v2+0.000818452380952*v0_v1_v2_v0+0.000223214285714*v0_v0_v3_v0+-0.0104166666667*v0_v1_v4+-0.125*v6_v1+0.0104166666667*v1_v0_v4+0.000372023809524*v0_v2_v0_v1+0.000223214285714*v1_v0_v0_v2+-0.125*v4_v3+-0.00178571428571*v3_v0_v2+0.0014880952381*v1_v1_v3+0.125*v1_v6+7.44047619048e-05*v1_v1_v1_v0+-7.44047619048e-05*v0_v1_v0_v2+-0.000223214285714*v1_v1_v0_v1+-7.44047619048e-05*v0_v1_v1_v1);
    tH[3].block(n, n, n, n) = h5 * (-2.5*v3+0.0833333333333*v0_v1+-0.0833333333333*v1_v0);
    tH[3].block(n, n, n, n) += h6 * (-0.125*v0_v2+-0.0416666666667*v1_v1+0.125*v2_v0);
    tH[3].block(n, n, n, n) += h7 * (-0.0104166666667*v1_v0_v0+0.0208333333333*v0_v1_v0+-0.125*v3_v0+0.125*v0_v3+-7.0*v5+-0.00833333333333*v1_v2+0.00833333333333*v2_v1+-0.0104166666667*v0_v0_v1);
    tH[3].block(n, n, n, n) += h8 * (0.00208333333333*v1_v1_v0+-0.00416666666667*v0_v2_v0+-0.00416666666667*v1_v0_v1+-0.025*v2_v2+0.00208333333333*v0_v1_v1+0.125*v4_v0+0.00208333333333*v0_v0_v2+0.00208333333333*v2_v0_v0+-0.125*v0_v4);
    tH[3].block(n, n, n, n) += h9 * (-0.00357142857143*v2_v3+0.00208333333333*v1_v2_v0+0.125*v0_v5+0.00208333333333*v0_v2_v1+-0.00208333333333*v0_v1_v2+-0.125*v5_v0+-0.00208333333333*v2_v1_v0+0.00357142857143*v3_v2+-13.5*v7);
    tH[3].block(n, n, n, n) += h10 * (0.000595238095238*v3_v1_v0+-0.000892857142857*v0_v3_v1+0.000297619047619*v1_v0_v3+-0.0178571428571*v3_v3+-0.000595238095238*v2_v0_v2+0.00119047619048*v1_v2_v1+-0.000595238095238*v1_v1_v2+0.000297619047619*v2_v2_v0+-0.125*v0_v6+-0.000892857142857*v1_v3_v0+0.125*v6_v0+-0.000595238095238*v2_v1_v1+0.000595238095238*v0_v1_v3+0.000297619047619*v0_v2_v2+0.000297619047619*v3_v0_v1);
    tDelta(4, 0) = MatrixXs::Zero(2*n, 2*n);
    tDelta(4, 1) = MatrixXs::Zero(2*n, 2*n);
    tDelta(4, 2) = MatrixXs::Zero(2*n, 2*n);
    tDelta(4, 3) = MatrixXs::Zero(2*n, 2*n);
    tDelta(4, 4) = MatrixXs::Zero(2*n, 2*n);
    tDelta(4, 5) = MatrixXs::Zero(2*n, 2*n);
    tDelta(4, 6) = MatrixXs::Zero(2*n, 2*n);
    tDelta(4, 7).resize(2*n, 2*n);
    tDelta(4, 7).block(0, 0, n, n) = (-0.03125*v1_v0_v0+0.0625*v0_v1_v0+-0.75*v3_v0+0.75*v0_v3+0.275*v2_v1+0.225*v1_v2+-31.5*v5+-0.03125*v0_v0_v1) + h1 * (0.0520833333333*v0_v1_v1+-0.1875*v0_v2_v0+0.0416666666667*v1_v0_v1+-1.5*v2_v2+-1.875*v1_v3+346.5*v6+-0.09375*v1_v1_v0+5.25*v4_v0+0.09375*v0_v0_v2+-1.875*v3_v1+0.09375*v2_v0_v0+-5.25*v0_v4) + h2 * (5.775*v2_v3+-0.104166666667*v1_v0_v2+-0.0625*v2_v0_v1+21.0*v0_v5+-0.09375*v0_v2_v1+-0.0625*v1_v1_v1+0.21875*v1_v2_v0+-0.1875*v0_v0_v3+0.375*v0_v3_v0+7.625*v4_v1+-21.0*v5_v0+0.15625*v2_v1_v0+5.975*v3_v2+-0.114583333333*v0_v1_v2+-0.1875*v3_v0_v0+-2079.0*v7+8.625*v1_v4);
    tDelta(4, 7).block(0, n, n, n) = (-0.125*v0_v2+-0.0416666666667*v1_v1+0.125*v2_v0+3.5*v4) + h1 * (-0.0208333333333*v1_v0_v0+0.0416666666667*v0_v1_v0+-0.625*v3_v0+0.625*v0_v3+0.25*v2_v1+0.25*v1_v2+-31.5*v5+-0.0208333333333*v0_v0_v1) + h2 * (0.0208333333333*v0_v1_v1+-0.0416666666667*v0_v2_v0+0.0208333333333*v1_v0_v1+-0.625*v2_v2+-0.875*v1_v3+157.5*v6+-0.0416666666667*v1_v1_v0+1.875*v4_v0+0.0208333333333*v0_v0_v2+-0.875*v3_v1+0.0208333333333*v2_v0_v0+-1.875*v0_v4);
    tDelta(4, 7).block(n, 0, n, n) = (0.1*v1_v1_v0+0.1125*v0_v2_v0+-0.0541666666667*v1_v0_v1+1.425*v2_v2+2.0*v1_v3+-346.5*v6+-0.0458333333333*v0_v1_v1+-4.375*v4_v0+-0.05625*v0_v0_v2+2.0*v3_v1+-0.05625*v2_v0_v0+4.375*v0_v4) + h1 * (-13.125*v2_v3+-0.0078125*v0_v1_v0_v0+0.21875*v1_v0_v2+-13.125*v3_v2+0.21875*v2_v0_v1+-18.375*v4_v1+-0.00260416666667*v0_v0_v0_v1+0.145833333333*v1_v1_v1+-18.375*v1_v4+0.28125*v0_v0_v3+-0.5625*v0_v3_v0+0.19375*v0_v1_v2+39.375*v5_v0+-0.43125*v2_v1_v0+-0.4125*v1_v2_v0+4504.5*v7+0.0078125*v0_v0_v1_v0+0.28125*v3_v0_v0+0.00260416666667*v1_v0_v0_v0+0.2125*v0_v2_v1+-39.375*v0_v5) + h2 * (-0.84375*v0_v0_v4+0.00260416666667*v0_v0_v0_v2+1.6875*v0_v4_v0+-0.84375*v4_v0_v0+-0.404166666667*v1_v2_v1+0.00260416666667*v0_v0_v1_v1+-0.00260416666667*v2_v0_v0_v0+1.1625*v1_v3_v0+67.75*v2_v4+59.625*v3_v3+-0.6*v2_v0_v2+-0.402083333333*v1_v1_v2+-0.0078125*v0_v1_v1_v0+1.14375*v2_v2_v0+-196.875*v6_v0+-0.55625*v0_v1_v3+0.0078125*v1_v1_v0_v0+67.75*v4_v2+-0.0078125*v0_v0_v2_v0+-0.60625*v1_v0_v3+-0.0078125*v1_v0_v1_v0+0.0078125*v0_v2_v0_v0+196.875*v0_v6+0.00260416666667*v1_v0_v0_v1+95.375*v5_v1+-0.54375*v0_v2_v2+-0.60625*v3_v0_v1+-0.402083333333*v2_v1_v1+1.25625*v3_v1_v0+95.375*v1_v5+-0.65*v0_v3_v1+0.00260416666667*v0_v1_v0_v1);
    tDelta(4, 7).block(n, n, n, n) = (0.0104166666667*v1_v0_v0+-0.0208333333333*v0_v1_v0+0.5*v3_v0+-0.5*v0_v3+-0.225*v2_v1+-0.275*v1_v2+31.5*v5+0.0104166666667*v0_v0_v1) + h1 * (0.0729166666667*v1_v1_v0+0.0625*v0_v2_v0+-0.0416666666667*v1_v0_v1+1.5*v2_v2+1.875*v1_v3+-346.5*v6+-0.03125*v0_v1_v1+-3.5*v4_v0+-0.03125*v0_v0_v2+1.875*v3_v1+-0.03125*v2_v0_v0+3.5*v0_v4) + h2 * (-5.975*v2_v3+0.0625*v1_v0_v2+0.104166666667*v2_v0_v1+-14.0*v0_v5+0.0729166666667*v0_v2_v1+0.0625*v1_v1_v1+-0.114583333333*v1_v2_v0+0.0625*v0_v0_v3+-0.125*v0_v3_v0+-8.625*v4_v1+14.0*v5_v0+-0.177083333333*v2_v1_v0+-5.775*v3_v2+0.0520833333333*v0_v1_v2+0.0625*v3_v0_v0+2079.0*v7+-7.625*v1_v4);
    tDelta(4, 8).resize(2*n, 2*n);
    tDelta(4, 8).block(0, 0, n, n) = (-0.0458333333333*v0_v1_v1+0.1125*v0_v2_v0+-0.0541666666667*v1_v0_v1+1.425*v2_v2+2.0*v1_v3+-346.5*v6+0.1*v1_v1_v0+-4.375*v4_v0+-0.05625*v0_v0_v2+2.0*v3_v1+-0.05625*v2_v0_v0+4.375*v0_v4) + h1 * (-13.125*v2_v3+-0.0078125*v0_v1_v0_v0+0.21875*v1_v0_v2+0.21875*v2_v0_v1+-18.375*v4_v1+-0.00260416666667*v0_v0_v0_v1+-18.375*v1_v4+0.145833333333*v1_v1_v1+-0.4125*v1_v2_v0+0.28125*v0_v0_v3+-0.5625*v0_v3_v0+4504.5*v7+39.375*v5_v0+-0.43125*v2_v1_v0+-13.125*v3_v2+0.19375*v0_v1_v2+0.0078125*v0_v0_v1_v0+0.28125*v3_v0_v0+0.00260416666667*v1_v0_v0_v0+0.2125*v0_v2_v1+-39.375*v0_v5);
    tDelta(4, 8).block(0, n, n, n) = (0.0104166666667*v1_v0_v0+-0.0208333333333*v0_v1_v0+0.5*v3_v0+-0.5*v0_v3+-0.225*v2_v1+-0.275*v1_v2+31.5*v5+0.0104166666667*v0_v0_v1) + h1 * (-0.03125*v0_v1_v1+0.0625*v0_v2_v0+-0.0416666666667*v1_v0_v1+1.5*v2_v2+1.875*v1_v3+-346.5*v6+0.0729166666667*v1_v1_v0+-3.5*v4_v0+-0.03125*v0_v0_v2+1.875*v3_v1+-0.03125*v2_v0_v0+3.5*v0_v4);
    tDelta(4, 8).block(n, 0, n, n) = (13.5*v2_v3+-0.00625*v0_v1_v0_v0+-0.175*v1_v0_v2+12.75*v3_v2+-0.2625*v2_v0_v1+19.25*v4_v1+-0.00208333333333*v0_v0_v0_v1+-0.145833333333*v1_v1_v1+17.5*v1_v4+-0.125*v0_v0_v3+0.25*v0_v3_v0+-0.125*v0_v1_v2+-31.5*v5_v0+0.425*v2_v1_v0+0.3*v1_v2_v0+-4504.5*v7+0.00625*v0_v0_v1_v0+-0.125*v3_v0_v0+0.00208333333333*v1_v0_v0_v0+-0.1625*v0_v2_v1+31.5*v0_v5) + h1 * (0.875*v0_v0_v4+0.00625*v0_v0_v0_v2+-1.75*v0_v4_v0+0.875*v4_v0_v0+0.8625*v1_v2_v1+0.00104166666667*v0_v0_v1_v1+-0.00625*v2_v0_v0_v0+-1.75*v1_v3_v0+-147.0*v2_v4+-131.25*v3_v3+1.3125*v2_v0_v2+0.7375*v1_v1_v2+-2.175*v2_v2_v0+346.5*v6_v0+0.75*v0_v1_v3+-0.00625*v1_v1_v0_v0+-147.0*v4_v2+-0.01875*v0_v0_v2_v0+1.0*v1_v0_v3+0.0125*v1_v0_v1_v0+0.01875*v0_v2_v0_v0+-346.5*v0_v6+-0.00520833333333*v1_v0_v0_v1+-220.5*v5_v1+0.8625*v0_v2_v2+1.75*v3_v0_v1+0.9625*v2_v1_v1+-2.9375*v3_v1_v0+-189.0*v1_v5+1.1875*v0_v3_v1+-0.00208333333333*v0_v1_v0_v1);
    tDelta(4, 8).block(n, n, n, n) = (0.0166666666667*v0_v1_v1+-0.0125*v0_v2_v0+0.0291666666667*v1_v0_v1+-1.575*v2_v2+-1.75*v1_v3+346.5*v6+-0.0458333333333*v1_v1_v0+2.625*v4_v0+0.00625*v0_v0_v2+-1.75*v3_v1+0.00625*v2_v0_v0+-2.625*v0_v4) + h1 * (13.125*v2_v3+-0.0078125*v0_v1_v0_v0+-0.09375*v1_v0_v2+-0.21875*v2_v0_v1+18.375*v4_v1+-0.00260416666667*v0_v0_v0_v1+14.875*v1_v4+-0.104166666667*v1_v1_v1+0.15*v1_v2_v0+-0.03125*v0_v0_v3+0.0625*v0_v3_v0+-4504.5*v7+-23.625*v5_v0+0.31875*v2_v1_v0+13.125*v3_v2+-0.05625*v0_v1_v2+0.0078125*v0_v0_v1_v0+-0.03125*v3_v0_v0+0.00260416666667*v1_v0_v0_v0+-0.1*v0_v2_v1+23.625*v0_v5);
    tDelta(4, 9).resize(2*n, 2*n);
    tDelta(4, 9).block(0, 0, n, n) = 7.71428571429*v2_v3+0.003125*v0_v1_v0_v0+-0.1*v1_v0_v2+-0.15*v2_v0_v1+11.0*v4_v1+0.00104166666667*v0_v0_v0_v1+10.0*v1_v4+-0.0833333333333*v1_v1_v1+0.1875*v1_v2_v0+-0.125*v0_v0_v3+0.25*v0_v3_v0+-2574.0*v7+-20.25*v5_v0+0.2625*v2_v1_v0+7.28571428571*v3_v2+-0.0875*v0_v1_v2+-0.003125*v0_v0_v1_v0+-0.125*v3_v0_v0+-0.00104166666667*v1_v0_v0_v0+-0.1125*v0_v2_v1+20.25*v0_v5;
    tDelta(4, 9).block(0, n, n, n) = 0.0125*v0_v1_v1+-0.025*v0_v2_v0+0.0166666666667*v1_v0_v1+-0.9*v2_v2+-1.0*v1_v3+198.0*v6+-0.0291666666667*v1_v1_v0+1.75*v4_v0+0.0125*v0_v0_v2+-1.0*v3_v1+0.0125*v2_v0_v0+-1.75*v0_v4;
    tDelta(4, 9).block(n, 0, n, n) = -0.3125*v0_v0_v4+-0.003125*v0_v0_v0_v2+0.625*v0_v4_v0+-0.3125*v4_v0_v0+-0.446428571429*v1_v2_v1+-0.00208333333333*v0_v0_v1_v1+0.003125*v2_v0_v0_v0+0.678571428571*v1_v3_v0+82.5*v2_v4+76.0714285714*v3_v3+-0.664285714286*v2_v0_v2+-0.339285714286*v1_v1_v2+0.00625*v0_v1_v1_v0+1.04464285714*v2_v2_v0+-173.25*v6_v0+-0.285714285714*v0_v1_v3+-0.00625*v1_v1_v0_v0+82.5*v4_v2+0.009375*v0_v0_v2_v0+-0.392857142857*v1_v0_v3+0.00625*v1_v0_v1_v0+-0.009375*v0_v2_v0_v0+173.25*v0_v6+-0.00208333333333*v1_v0_v0_v1+130.5*v5_v1+-0.380357142857*v0_v2_v2+-1.14285714286*v3_v0_v1+-0.564285714286*v2_v1_v1+1.71428571429*v3_v1_v0+99.0*v1_v5+-0.571428571429*v0_v3_v1+-0.00208333333333*v0_v1_v0_v1;
    tDelta(4, 9).block(n, n, n, n) = -7.28571428571*v2_v3+0.003125*v0_v1_v0_v0+0.025*v1_v0_v2+0.1*v2_v0_v1+-10.0*v4_v1+0.0375*v0_v2_v1+0.0416666666667*v1_v1_v1+-0.0375*v1_v2_v0+-11.25*v0_v5+-7.5*v1_v4+2574.0*v7+11.25*v5_v0+-0.1375*v2_v1_v0+-7.71428571429*v3_v2+0.0125*v0_v1_v2+-0.003125*v0_v0_v1_v0+-0.00104166666667*v1_v0_v0_v0+0.00104166666667*v0_v0_v0_v1;
    tH[4].resize(2*n, 2*n);
    tH[4].block(0, 0, n, n) = h7 * (-0.03125*v1_v0_v0+0.0625*v0_v1_v0+-0.75*v3_v0+0.75*v0_v3+-31.5*v5+0.225*v1_v2+0.275*v2_v1+-0.03125*v0_v0_v1);
    tH[4].block(0, 0, n, n) += h8 * (0.00625*v0_v1_v1+-0.075*v0_v2_v0+-0.0125*v1_v0_v1+-0.075*v2_v2+0.125*v1_v3+0.00625*v1_v1_v0+0.875*v4_v0+0.0375*v0_v0_v2+0.125*v3_v1+0.0375*v2_v0_v0+-0.875*v0_v4);
    tH[4].block(0, 0, n, n) += h9 * (0.364285714286*v2_v3+-0.0046875*v0_v1_v0_v0+0.0145833333333*v1_v0_v2+0.00625*v2_v0_v1+0.25*v4_v1+-0.0015625*v0_v0_v0_v1+0.25*v1_v4+-0.00625*v1_v2_v0+-0.03125*v0_v0_v3+0.0625*v0_v3_v0+-148.5*v7+-1.875*v5_v0+-0.0125*v2_v1_v0+0.135714285714*v3_v2+-0.00833333333333*v0_v1_v2+0.0046875*v0_v0_v1_v0+-0.03125*v3_v0_v0+0.0015625*v1_v0_v0_v0+0.00625*v0_v2_v1+1.875*v0_v5);
    tH[4].block(0, 0, n, n) += h10 * (0.03125*v0_v0_v4+0.000520833333333*v0_v0_v0_v2+-0.0625*v0_v4_v0+0.03125*v4_v0_v0+0.00357142857143*v1_v2_v1+0.000520833333333*v0_v0_v1_v1+-0.000520833333333*v2_v0_v0_v0+-0.00267857142857*v1_v3_v0+0.00190972222222*v1_v0_v1_v0+0.0714285714286*v3_v3+-0.00178571428571*v2_v0_v2+0.000297619047619*v1_v1_v2+-0.000868055555556*v0_v1_v1_v0+0.00714285714286*v2_v2_v0+2.25*v6_v0+0.0122023809524*v0_v1_v3+-0.000520833333333*v1_v1_v0_v0+-0.0015625*v0_v0_v2_v0+-0.00952380952381*v1_v0_v3+0.125*v5_v1+0.0015625*v0_v2_v0_v0+-2.25*v0_v6+-0.000868055555556*v1_v0_v0_v1+-0.00535714285714*v0_v2_v2+0.0113095238095*v3_v0_v1+-0.00386904761905*v2_v1_v1+-0.00863095238095*v3_v1_v0+0.125*v1_v5+-0.00267857142857*v0_v3_v1+-0.000173611111111*v0_v1_v0_v1);
    tH[4].block(0, n, n, n) = h7 * (-0.125*v0_v2+-0.0416666666667*v1_v1+0.125*v2_v0+3.5*v4);
    tH[4].block(0, n, n, n) += h8 * (-0.0104166666667*v1_v0_v0+0.0208333333333*v0_v1_v0+-0.125*v3_v0+0.125*v0_v3+-0.025*v1_v2+0.025*v2_v1+-0.0104166666667*v0_v0_v1);
    tH[4].block(0, n, n, n) += h9 * (0.00208333333333*v0_v1_v1+-0.00416666666667*v0_v2_v0+-0.00416666666667*v1_v0_v1+-0.025*v2_v2+9.0*v6+0.00208333333333*v1_v1_v0+0.125*v4_v0+0.00208333333333*v0_v0_v2+0.00208333333333*v2_v0_v0+-0.125*v0_v4);
    tH[4].block(0, n, n, n) += h10 * (-0.0107142857143*v2_v3+0.00208333333333*v1_v2_v0+0.125*v0_v5+0.00208333333333*v0_v2_v1+-0.125*v5_v0+-0.00208333333333*v2_v1_v0+0.0107142857143*v3_v2+-0.00208333333333*v0_v1_v2);
    tH[4].block(n, 0, n, n) = h7 * (-0.0458333333333*v0_v1_v1+0.1125*v0_v2_v0+-0.0541666666667*v1_v0_v1+1.425*v2_v2+2.0*v1_v3+-346.5*v6+0.1*v1_v1_v0+-4.375*v4_v0+-0.05625*v0_v0_v2+2.0*v3_v1+-0.05625*v2_v0_v0+4.375*v0_v4);
    tH[4].block(n, 0, n, n) += h8 * (0.375*v2_v3+-0.0140625*v0_v1_v0_v0+0.04375*v1_v0_v2+-0.04375*v2_v0_v1+0.875*v4_v1+-0.0046875*v0_v0_v0_v1+-0.1125*v1_v2_v0+0.15625*v0_v0_v3+-0.3125*v0_v3_v0+-7.875*v0_v5+7.875*v5_v0+-0.00625*v2_v1_v0+-0.375*v3_v2+0.06875*v0_v1_v2+0.0140625*v0_v0_v1_v0+0.15625*v3_v0_v0+0.0046875*v1_v0_v0_v0+0.05*v0_v2_v1+-0.875*v1_v4);
    tH[4].block(n, 0, n, n) += h9 * (-0.28125*v0_v0_v4+0.00572916666667*v0_v0_v0_v2+0.5625*v0_v4_v0+-0.28125*v4_v0_v0+0.0119047619048*v1_v2_v1+0.0015625*v0_v0_v1_v1+-0.00572916666667*v2_v0_v0_v0+0.0910714285714*v1_v3_v0+3.25*v2_v4+4.44642857143*v3_v3+0.0482142857143*v2_v0_v2+-0.0015625*v0_v1_v1_v0+0.0133928571429*v2_v2_v0+-23.625*v6_v0+-0.0919642857143*v0_v1_v3+-0.0046875*v1_v1_v0_v0+-0.00386904761905*v2_v1_v1+-0.0171875*v0_v0_v2_v0+0.000892857142857*v1_v0_v3+0.0109375*v1_v0_v1_v0+0.0171875*v0_v2_v0_v0+0.0330357142857*v3_v1_v0+23.625*v0_v6+-0.0046875*v1_v0_v0_v1+5.375*v5_v1+-0.0616071428571*v0_v2_v2+0.000892857142857*v3_v0_v1+-2574.0*v8+3.25*v4_v2+-0.00386904761905*v1_v1_v2+5.375*v1_v5+-0.0339285714286*v0_v3_v1+-0.0015625*v0_v1_v0_v1);
    tH[4].block(n, 0, n, n) += h10 * (0.0678571428571*v0_v2_v3+-0.00104166666667*v0_v0_v1_v0_v0+-0.00200892857143*v2_v1_v0_v0+0.00111607142857*v0_v2_v0_v1+0.0419642857143*v0_v3_v2+-0.00379464285714*v2_v0_v0_v1+0.00136408730159*v1_v0_v1_v1+0.0416666666667*v4_v0_v1+0.00647321428571*v2_v0_v1_v0+0.03125*v0_v4_v1+-0.0258928571429*v2_v0_v3+0.00543154761905*v3_v0_v0_v0+-37.125*v0_v7+-0.875*v0_v5_v0+-0.00543154761905*v0_v0_v0_v3+0.4375*v0_v0_v5+-0.0419642857143*v2_v3_v0+0.00379464285714*v1_v0_v0_v2+-0.0678571428571*v3_v2_v0+-0.09375*v1_v4_v0+0.00982142857143*v2_v2_v1+37.125*v7_v0+-0.00245535714286*v0_v2_v1_v0+-0.014880952381*v3_v1_v1+-0.000173611111111*v0_v0_v0_v0_v1+-0.875*v3_v4+0.000669642857143*v0_v0_v2_v1+0.00245535714286*v1_v2_v0_v0+-0.00136408730159*v1_v1_v0_v1+-0.0729166666667*v4_v1_v0+-0.000173611111111*v1_v0_v0_v0_v0+0.00349702380952*v0_v1_v2_v0+0.0162946428571*v0_v0_v3_v0+0.000694444444444*v0_v1_v0_v0_v0+0.135416666667*v0_v1_v4+2.25*v6_v1+-0.0416666666667*v1_v0_v4+0.4375*v5_v0_v0+-0.00215773809524*v0_v0_v1_v2+0.875*v4_v3+0.0258928571429*v3_v0_v2+0.375*v2_v5+0.014880952381*v1_v1_v3+-2.25*v1_v6+-0.0162946428571*v0_v3_v0_v0+-0.000124007936508*v1_v1_v1_v0+-0.00982142857143*v1_v2_v2+0.000818452380952*v0_v1_v0_v2+0.000694444444444*v0_v0_v0_v1_v0+-0.375*v5_v2+0.000124007936508*v0_v1_v1_v1+-0.00840773809524*v1_v0_v2_v0);
    tH[4].block(n, n, n, n) = h7 * (0.0104166666667*v1_v0_v0+-0.0208333333333*v0_v1_v0+0.5*v3_v0+-0.5*v0_v3+31.5*v5+-0.275*v1_v2+-0.225*v2_v1+0.0104166666667*v0_v0_v1);
    tH[4].block(n, n, n, n) += h8 * (-0.0145833333333*v0_v1_v1+0.05*v0_v2_v0+-0.0125*v1_v0_v1+-0.075*v2_v2+0.125*v1_v3+0.0270833333333*v1_v1_v0+-0.875*v4_v0+-0.025*v0_v0_v2+0.125*v3_v1+-0.025*v2_v0_v0+0.875*v0_v4);
    tH[4].block(n, n, n, n) += h9 * (-0.135714285714*v2_v3+-0.0046875*v0_v1_v0_v0+-0.00625*v1_v0_v2+-0.00208333333333*v1_v2_v0+-0.0145833333333*v2_v0_v1+-0.25*v4_v1+-0.0015625*v0_v0_v0_v1+-0.25*v1_v4+0.03125*v0_v0_v3+-0.0625*v0_v3_v0+148.5*v7+1.625*v5_v0+0.00416666666667*v2_v1_v0+-0.364285714286*v3_v2+0.00833333333333*v0_v1_v2+0.0046875*v0_v0_v1_v0+0.03125*v3_v0_v0+0.0015625*v1_v0_v0_v0+0.0104166666667*v0_v2_v1+-1.625*v0_v5);
    tH[4].block(n, n, n, n) += h10 * (-0.03125*v0_v0_v4+0.000520833333333*v0_v0_v0_v2+0.0625*v0_v4_v0+-0.03125*v4_v0_v0+0.00357142857143*v1_v2_v1+0.000520833333333*v0_v0_v1_v1+-0.000520833333333*v2_v0_v0_v0+-0.00267857142857*v1_v3_v0+0.00190972222222*v1_v0_v1_v0+0.0714285714286*v3_v3+-0.00178571428571*v2_v0_v2+-0.00386904761905*v1_v1_v2+-0.000868055555556*v0_v1_v1_v0+0.00714285714286*v2_v2_v0+-2.25*v6_v0+-0.00863095238095*v0_v1_v3+-0.000520833333333*v1_v1_v0_v0+-0.0015625*v0_v0_v2_v0+0.0113095238095*v1_v0_v3+0.125*v5_v1+0.0015625*v0_v2_v0_v0+2.25*v0_v6+-0.000868055555556*v1_v0_v0_v1+-0.00535714285714*v0_v2_v2+-0.00952380952381*v3_v0_v1+0.000297619047619*v2_v1_v1+0.0122023809524*v3_v1_v0+0.125*v1_v5+-0.00267857142857*v0_v3_v1+-0.000173611111111*v0_v1_v0_v1);
    tH[5].resize(2*n, 2*n);
    tH[5].block(0, 0, n, n) = h9 * (-1.92857142857*v2_v3+-0.0125*v0_v1_v0_v0+0.025*v1_v0_v2+0.0375*v2_v0_v1+-2.75*v4_v1+-0.00416666666667*v0_v0_v0_v1+-2.5*v1_v4+0.0208333333333*v1_v1_v1+-0.075*v1_v2_v0+0.125*v0_v0_v3+-0.25*v0_v3_v0+643.5*v7+9.0*v5_v0+-0.1*v2_v1_v0+-1.82142857143*v3_v2+0.05*v0_v1_v2+0.0125*v0_v0_v1_v0+0.125*v3_v0_v0+0.00416666666667*v1_v0_v0_v0+0.0625*v0_v2_v1+-9.0*v0_v5);
    tH[5].block(0, 0, n, n) += h10 * (-0.25*v0_v0_v4+0.00625*v0_v0_v0_v2+0.5*v0_v4_v0+-0.25*v4_v0_v0+0.0178571428571*v1_v2_v1+0.00208333333333*v0_v0_v1_v1+-0.00625*v2_v0_v0_v0+0.0178571428571*v1_v3_v0+0.375*v2_v4+-0.267857142857*v3_v3+-0.0214285714286*v2_v0_v2+0.00357142857143*v1_v1_v2+-0.00416666666667*v0_v1_v1_v0+0.0857142857143*v2_v2_v0+-12.375*v6_v0+-0.0535714285714*v0_v1_v3+0.375*v4_v2+-0.01875*v0_v0_v2_v0+0.0357142857143*v1_v0_v3+0.00416666666667*v1_v0_v1_v0+0.01875*v0_v2_v0_v0+12.375*v0_v6+-0.00208333333333*v1_v0_v0_v1+-1.125*v5_v1+-0.0642857142857*v0_v2_v2+0.0357142857143*v3_v0_v1+0.00357142857143*v2_v1_v1+0.00892857142857*v3_v1_v0+-1.125*v1_v5+-0.0446428571429*v0_v3_v1);
    tH[5].block(0, n, n, n) = h9 * (0.0125*v1_v1_v0+0.0375*v0_v2_v0+-0.00416666666667*v1_v0_v1+0.225*v2_v2+0.25*v1_v3+-49.5*v6+-0.00833333333333*v0_v1_v1+-0.875*v4_v0+-0.01875*v0_v0_v2+0.25*v3_v1+-0.01875*v2_v0_v0+0.875*v0_v4);
    tH[5].block(0, n, n, n) += h10 * (-0.0535714285714*v2_v3+-0.0046875*v0_v1_v0_v0+-0.00625*v1_v0_v2+0.00625*v2_v0_v1+-0.125*v4_v1+-0.0015625*v0_v0_v0_v1+0.125*v1_v4+0.03125*v0_v0_v3+-0.0625*v0_v3_v0+-1.125*v0_v5+1.125*v5_v0+-0.01875*v2_v1_v0+0.0535714285714*v3_v2+0.00625*v0_v1_v2+0.0046875*v0_v0_v1_v0+0.03125*v3_v0_v0+0.0015625*v1_v0_v0_v0+0.0125*v0_v2_v1);
    tH[5].block(n, 0, n, n) = h9 * (0.625*v0_v0_v4+-0.00625*v0_v0_v0_v2+-1.25*v0_v4_v0+0.625*v4_v0_v0+0.180357142857*v1_v2_v1+-0.00520833333333*v0_v0_v1_v1+0.00625*v2_v0_v0_v0+-0.607142857143*v1_v3_v0+-20.625*v2_v4+-19.0178571429*v3_v3+0.166071428571*v2_v0_v2+0.0166666666667*v0_v1_v1_v0+-0.439285714286*v2_v2_v0+86.625*v6_v0+0.321428571429*v0_v1_v3+-0.01875*v1_v1_v0_v0+0.141071428571*v2_v1_v1+0.01875*v0_v0_v2_v0+0.285714285714*v1_v0_v3+0.0208333333333*v1_v0_v1_v0+-0.01875*v0_v2_v0_v0+-0.678571428571*v3_v1_v0+-86.625*v0_v6+-0.00729166666667*v1_v0_v0_v1+-32.625*v5_v1+0.273214285714*v0_v2_v2+0.285714285714*v3_v0_v1+9652.5*v8+-20.625*v4_v2+0.141071428571*v1_v1_v2+-32.625*v1_v5+0.392857142857*v0_v3_v1+-0.00625*v0_v1_v0_v1);
    tH[5].block(n, 0, n, n) += h10 * (-0.441964285714*v0_v2_v3+-0.003125*v0_v0_v1_v0_v0+0.00714285714286*v2_v1_v0_v0+0.00401785714286*v0_v2_v0_v1+-0.508928571429*v0_v3_v2+-0.00803571428571*v2_v0_v0_v1+0.00178571428571*v1_v0_v1_v1+0.28125*v4_v0_v1+0.0120535714286*v2_v0_v1_v0+-0.53125*v0_v4_v1+0.120535714286*v2_v0_v3+-0.0223214285714*v3_v0_v0_v0+160.875*v0_v7+3.9375*v0_v5_v0+0.0223214285714*v0_v0_v0_v3+-1.96875*v0_v0_v5+0.321428571429*v2_v3_v0+0.00803571428571*v1_v0_v0_v2+-0.120535714286*v3_v0_v2+0.96875*v1_v4_v0+0.0803571428571*v2_v2_v1+-160.875*v7_v0+-0.0263392857143*v0_v2_v1_v0+0.0401785714286*v3_v1_v1+-0.000520833333333*v0_v0_v0_v0_v1+1.875*v3_v4+0.0111607142857*v0_v0_v2_v1+0.0294642857143*v1_v2_v0_v0+-0.00178571428571*v1_v1_v0_v1+0.25*v4_v1_v0+-0.000520833333333*v1_v0_v0_v0_v0+-0.0330357142857*v0_v1_v2_v0+-0.0669642857143*v0_v0_v3_v0+0.00208333333333*v0_v1_v0_v0_v0+-0.6875*v0_v1_v4+-12.375*v6_v1+-0.28125*v1_v0_v4+-1.96875*v5_v0_v0+0.0116071428571*v0_v0_v1_v2+-1.875*v4_v3+0.629464285714*v3_v2_v0+-3.375*v2_v5+-0.0401785714286*v1_v1_v3+12.375*v1_v6+0.0669642857143*v0_v3_v0_v0+-0.0046130952381*v1_v1_v1_v0+-0.0803571428571*v1_v2_v2+0.00982142857143*v0_v1_v0_v2+0.00208333333333*v0_v0_v0_v1_v0+3.375*v5_v2+0.0046130952381*v0_v1_v1_v1+-0.0258928571429*v1_v0_v2_v0);
    tH[5].block(n, n, n, n) = h9 * (1.82142857143*v2_v3+0.003125*v0_v1_v0_v0+-0.0375*v1_v0_v2+-0.025*v2_v0_v1+2.5*v4_v1+0.00104166666667*v0_v0_v0_v1+2.75*v1_v4+-0.0208333333333*v1_v1_v1+0.075*v1_v2_v0+-0.0625*v0_v0_v3+0.125*v0_v3_v0+-643.5*v7+-6.75*v5_v0+0.0625*v2_v1_v0+1.92857142857*v3_v2+-0.0375*v0_v1_v2+-0.003125*v0_v0_v1_v0+-0.0625*v3_v0_v0+-0.00104166666667*v1_v0_v0_v0+-0.0375*v0_v2_v1+6.75*v0_v5);
    tH[5].block(n, n, n, n) += h10 * (0.1875*v0_v0_v4+-0.003125*v0_v0_v0_v2+-0.375*v0_v4_v0+0.1875*v4_v0_v0+0.0178571428571*v1_v2_v1+-0.00208333333333*v0_v0_v1_v1+0.003125*v2_v0_v0_v0+-0.107142857143*v1_v3_v0+0.375*v2_v4+-0.267857142857*v3_v3+-0.0214285714286*v2_v0_v2+0.00625*v0_v1_v1_v0+-0.0267857142857*v2_v2_v0+12.375*v6_v0+0.0714285714286*v0_v1_v3+-0.00625*v1_v1_v0_v0+0.00357142857143*v2_v1_v1+0.009375*v0_v0_v2_v0+0.0357142857143*v1_v0_v3+0.00625*v1_v0_v1_v0+-0.009375*v0_v2_v0_v0+-0.116071428571*v3_v1_v0+-12.375*v0_v6+-0.00208333333333*v1_v0_v0_v1+-1.125*v5_v1+0.0482142857143*v0_v2_v2+0.0357142857143*v3_v0_v1+0.375*v4_v2+0.00357142857143*v1_v1_v2+-1.125*v1_v5+0.0803571428571*v0_v3_v1+-0.00208333333333*v0_v1_v0_v1);
};

#define INSTANTIATE_MATSLISE(Scalar) \
template void calculate_tcoeff_matrix<Scalar>(int, Scalar h, const std::array<Eigen::Matrix<Scalar, -1, -1>, MATSCS_N> &, Eigen::Array<Eigen::Matrix<Scalar, -1, -1>, MATSCS_ETA_delta, MATSCS_HMAX_delta> &, std::array<Eigen::Matrix<Scalar, -1, -1>, MATSCS_ETA_h> &);

#include "../util/instantiate.h"
